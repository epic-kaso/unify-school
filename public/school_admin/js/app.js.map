{"version":3,"sources":["app.js","routes.js","services.js","controllers/dialogs.js","controllers/home_controller.js","controllers/settings.js","directives/filestyle.js","directives/form-wizard.js","directives/imageupload.js","directives/masked.js","directives/others.js","directives/panel-tools.js","directives/tags-input.js","directives/validate-form.js"],"names":[],"mappingsjjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvtrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClfile":"app.js","sourcesContent":["/*!\r\n *\r\n * SchoolAdminApp - Bootstrap Admin App + AngularJS\r\n *\r\n * Author: @themicon_co\r\n * Website: http://themicon.co\r\n * License: http://support.wrapbootstrap.com/knowledge_base/topics/usage-licenses\r\n *\r\n */\r\n\r\nif (typeof $ === 'undefined') {\r\n    throw new Error('This application\\'s JavaScript requires jQuery');\r\n}\r\n\r\n// APP START\r\n// -----------------------------------\r\n\r\nvar App = angular.module('SchoolAdminApp', [\r\n    'ngRoute',\r\n    'ngAnimate',\r\n    'ngStorage',\r\n    'ngCookies',\r\n    'pascalprecht.translate',\r\n    'ui.bootstrap',\r\n    'ui.router',\r\n    'oc.lazyLoad',\r\n    'cfp.loadingBar',\r\n    'ngSanitize',\r\n    'ngResource',\r\n    'ui.utils'\r\n]);\r\n\r\nApp.run(\r\n    [\"$rootScope\", \"$state\", \"$stateParams\", '$window', '$templateCache', 'SchoolDataService',\r\n        function ($rootScope, $state, $stateParams, $window, $templateCache, SchoolDataService) {\r\n            // Set reference to access them from any scope\r\n            $rootScope.$state = $state;\r\n            $rootScope.$stateParams = $stateParams;\r\n            $rootScope.$storage = $window.localStorage;\r\n\r\n            // Uncomment this to disable template cache\r\n            /*$rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {\r\n             if (typeof(toState) !== 'undefined'){\r\n             $templateCache.remove(toState.templateUrl);\r\n             }\r\n             });*/\r\n\r\n            // Scope Globals\r\n            // -----------------------------------\r\n            $rootScope.app = {\r\n                name: 'SchoolAdminApp',\r\n                description: 'UnifySchools Admin App',\r\n                year: ((new Date()).getFullYear()),\r\n                layout: {\r\n                    isFixed: true,\r\n                    isCollapsed: false,\r\n                    isBoxed: false,\r\n                    isRTL: false,\r\n                    horizontal: false,\r\n                    isFloat: false,\r\n                    asideHover: false,\r\n                    theme: null\r\n                },\r\n                useFullLayout: false,\r\n                hiddenFooter: false,\r\n                viewAnimation: 'ng-fadeInUp'\r\n            };\r\n            $rootScope.user = SchoolDataService.adminUser;\r\n\r\n        }]);\r\n\r\n/**=========================================================\r\n * Module: config.js\r\n * App routes and resources configuration\r\n =========================================================*/\r\n\r\nApp.constant('ViewBaseURL', '/admin/dashboard/partial');\r\nApp.constant('AssetsBaseURL', '/framework');\r\n\r\nApp.config(['$ocLazyLoadProvider', 'APP_REQUIRES', function ($ocLazyLoadProvider, APP_REQUIRES) {\r\n    'use strict';\r\n\r\n    // Lazy Load modules configuration\r\n    $ocLazyLoadProvider.config({\r\n        debug: false,\r\n        events: true,\r\n        modules: APP_REQUIRES.modules\r\n    });\r\n\r\n}]).config(['$controllerProvider', '$compileProvider', '$filterProvider', '$provide',\r\n    function ($controllerProvider, $compileProvider, $filterProvider, $provide) {\r\n        'use strict';\r\n        // registering components after bootstrap\r\n        App.controller = $controllerProvider.register;\r\n        App.directive = $compileProvider.directive;\r\n        App.filter = $filterProvider.register;\r\n        App.factory = $provide.factory;\r\n        App.service = $provide.service;\r\n        App.constant = $provide.constant;\r\n        App.value = $provide.value;\r\n\r\n    }]).config(['$translateProvider', function ($translateProvider) {\r\n\r\n    $translateProvider.useStaticFilesLoader({\r\n        prefix: '/framework/app/i18n/',\r\n        suffix: '.json'\r\n    });\r\n    $translateProvider.preferredLanguage('en');\r\n    $translateProvider.useLocalStorage();\r\n    $translateProvider.usePostCompiling(true);\r\n\r\n}]).config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\r\n    cfpLoadingBarProvider.includeBar = true;\r\n    cfpLoadingBarProvider.includeSpinner = false;\r\n    cfpLoadingBarProvider.latencyThreshold = 500;\r\n    cfpLoadingBarProvider.parentSelector = '.wrapper > section';\r\n}]).config(['$tooltipProvider', function ($tooltipProvider) {\r\n\r\n    $tooltipProvider.options({appendToBody: true});\r\n\r\n}])\r\n;\r\n\r\n/**=========================================================\r\n * Module: constants.js\r\n * Define constants to inject across the application\r\n =========================================================*/\r\nApp\r\n    .constant('APP_COLORS', {\r\n        'primary': '#5d9cec',\r\n        'success': '#27c24c',\r\n        'info': '#23b7e5',\r\n        'warning': '#ff902b',\r\n        'danger': '#f05050',\r\n        'inverse': '#131e26',\r\n        'green': '#37bc9b',\r\n        'pink': '#f532e5',\r\n        'purple': '#7266ba',\r\n        'dark': '#3a3f51',\r\n        'yellow': '#fad732',\r\n        'gray-darker': '#232735',\r\n        'gray-dark': '#3a3f51',\r\n        'gray': '#dde6e9',\r\n        'gray-light': '#e4eaec',\r\n        'gray-lighter': '#edf1f2'\r\n    })\r\n    .constant('APP_MEDIAQUERY', {\r\n        'desktopLG': 1200,\r\n        'desktop': 992,\r\n        'tablet': 768,\r\n        'mobile': 480\r\n    })\r\n    .constant('APP_REQUIRES', {\r\n        // jQuery based and standalone scripts\r\n        scripts: {\r\n            'slimscroll': ['/framework/vendor/slimScroll/jquery.slimscroll.min.js'],\r\n            'taginput': ['/framework/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css',\r\n                '/framework/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js'],\r\n            'filestyle': ['/framework/vendor/bootstrap-filestyle/src/bootstrap-filestyle.js'],\r\n            'modernizr': ['/framework/vendor/modernizr/modernizr.js'],\r\n            'icons': ['/framework/vendor/fontawesome/css/font-awesome.min.css',\r\n                '/framework/vendor/simple-line-icons/css/simple-line-icons.css'],\r\n            'inputmask': ['/framework/vendor/jquery.inputmask/dist/jquery.inputmask.bundle.min.js'],\r\n            'parsley':            ['/framework/vendor/parsleyjs/dist/parsley.min.js']\r\n        },\r\n        // Angular based script (use the right module name)\r\n        modules: [\r\n            {\r\n                name: 'ngDialog',\r\n                files: ['/framework/vendor/ngDialog/js/ngDialog.min.js',\r\n                        '/framework/vendor/ngDialog/css/ngDialog.min.css',\r\n                        '/framework/vendor/ngDialog/css/ngDialog-theme-default.min.css'\r\n                        ] \r\n            },\r\n            {\r\n                name: 'ngUpload',\r\n                files: ['/framework/vendor/ngUpload/ng-upload.min.js']\r\n            },\r\n            {\r\n                name: 'toaster',\r\n                files: ['/framework/vendor/angularjs-toaster/toaster.js', '/framework/vendor/angularjs-toaster/toaster.css']\r\n            },\r\n            {\r\n                name: 'ngTable', files: ['/framework/vendor/ng-table/dist/ng-table.min.js',\r\n                '/framework/vendor/ng-table/dist/ng-table.min.css']\r\n            },\r\n            {name: 'ngTableExport', files: ['/framework/vendor/ng-table-export/ng-table-export.js']},\r\n            {\r\n                name: 'xeditable', files: ['/framework/vendor/angular-xeditable/dist/js/xeditable.js',\r\n                '/framework/vendor/angular-xeditable/dist/css/xeditable.css']\r\n            },\r\n        ]\r\n\r\n    })\r\n;\r\n/**=========================================================\r\n * Module: main.js\r\n * Main Application Controller\r\n =========================================================*/\r\n\r\nApp.controller('AppController',\r\n    ['$rootScope', '$scope', '$state', '$translate', '$window', '$localStorage', '$timeout', 'toggleStateService', 'colors', 'browser', 'cfpLoadingBar',\r\n        function ($rootScope, $scope, $state, $translate, $window, $localStorage, $timeout, toggle, colors, browser, cfpLoadingBar) {\r\n            \"use strict\";\r\n\r\n            // Setup the layout mode\r\n            $rootScope.app.layout.horizontal = ( $rootScope.$stateParams.layout == 'app-h');\r\n\r\n            // Loading bar transition\r\n            // -----------------------------------\r\n            var thBar;\r\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\r\n                if ($('.wrapper > section').length) // check if bar container exists\r\n                    thBar = $timeout(function () {\r\n                        cfpLoadingBar.start();\r\n                    }, 0); // sets a latency Threshold\r\n            });\r\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\r\n                event.targetScope.$watch(\"$viewContentLoaded\", function () {\r\n                    $timeout.cancel(thBar);\r\n                    cfpLoadingBar.complete();\r\n                });\r\n            });\r\n\r\n\r\n            // Hook not found\r\n            $rootScope.$on('$stateNotFound',\r\n                function (event, unfoundState, fromState, fromParams) {\r\n                    console.log(unfoundState.to); // \"lazy.state\"\r\n                    console.log(unfoundState.toParams); // {a:1, b:2}\r\n                    console.log(unfoundState.options); // {inherit:false} + default options\r\n                });\r\n            // Hook error\r\n            $rootScope.$on('$stateChangeError',\r\n                function (event, toState, toParams, fromState, fromParams, error) {\r\n                    console.log(error);\r\n                });\r\n            // Hook success\r\n            $rootScope.$on('$stateChangeSuccess',\r\n                function (event, toState, toParams, fromState, fromParams) {\r\n                    // display new view from top\r\n                    $window.scrollTo(0, 0);\r\n                    // Save the route title\r\n                    $rootScope.currTitle = $state.current.title;\r\n                });\r\n\r\n            $rootScope.currTitle = $state.current.title;\r\n            $rootScope.pageTitle = function () {\r\n                var title = $rootScope.app.name + ' - ' + ($rootScope.currTitle || $rootScope.app.description);\r\n                document.title = title;\r\n                return title;\r\n            };\r\n\r\n            // iPad may presents ghost click issues\r\n            // if( ! browser.ipad )\r\n            // FastClick.attach(document.body);\r\n\r\n            // Close submenu when sidebar change from collapsed to normal\r\n            $rootScope.$watch('app.layout.isCollapsed', function (newValue, oldValue) {\r\n                if (newValue === false)\r\n                    $rootScope.$broadcast('closeSidebarMenu');\r\n            });\r\n\r\n            // Restore layout settings\r\n            if (angular.isDefined($localStorage.layout))\r\n                $scope.app.layout = $localStorage.layout;\r\n            else\r\n                $localStorage.layout = $scope.app.layout;\r\n\r\n            $rootScope.$watch(\"app.layout\", function () {\r\n                $localStorage.layout = $scope.app.layout;\r\n            }, true);\r\n\r\n\r\n            // Allows to use branding color with interpolation\r\n            // {{ colorByName('primary') }}\r\n            $scope.colorByName = colors.byName;\r\n\r\n            // Internationalization\r\n            // ----------------------\r\n\r\n            $scope.language = {\r\n                // Handles language dropdown\r\n                listIsOpen: false,\r\n                // list of available languages\r\n                available: {\r\n                    'en': 'English',\r\n                    'es_AR': 'Espa�ol'\r\n                },\r\n                // display always the current ui language\r\n                init: function () {\r\n                    var proposedLanguage = $translate.proposedLanguage() || $translate.use();\r\n                    var preferredLanguage = $translate.preferredLanguage(); // we know we have set a preferred one in app.config\r\n                    $scope.language.selected = $scope.language.available[(proposedLanguage || preferredLanguage)];\r\n                },\r\n                set: function (localeId, ev) {\r\n                    // Set the new idiom\r\n                    $translate.use(localeId);\r\n                    // save a reference for the current language\r\n                    $scope.language.selected = $scope.language.available[localeId];\r\n                    // finally toggle dropdown\r\n                    $scope.language.listIsOpen = !$scope.language.listIsOpen;\r\n                }\r\n            };\r\n\r\n            $scope.language.init();\r\n\r\n            // Restore application classes state\r\n            toggle.restoreState($(document.body));\r\n\r\n            // cancel click event easily\r\n            $rootScope.cancel = function ($event) {\r\n                $event.stopPropagation();\r\n            };\r\n\r\n        }]);\r\n\r\n/**=========================================================\r\n * Module: sidebar-menu.js\r\n * Handle sidebar collapsible elements\r\n =========================================================*/\r\n\r\nApp.controller('SidebarController', ['$rootScope', '$scope', '$state', '$http', '$timeout', 'Utils', 'SchoolDataService',\r\n    function ($rootScope, $scope, $state, $http, $timeout, Utils, SchoolDataService) {\r\n\r\n        var collapseList = [];\r\n        var modules = SchoolDataService.school.loaded_modules;\r\n\r\n        // demo: when switch from collapse to hover, close all items\r\n        $rootScope.$watch('app.layout.asideHover', function (oldVal, newVal) {\r\n            if (newVal === false && oldVal === true) {\r\n                closeAllBut(-1);\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('selectedSchoolCategoryChanged', function (event, obj) {\r\n            console.log('event selectedSchoolCat received');\r\n\r\n            if (angular.isDefined($scope.menuItems)) {\r\n                angular.forEach($scope.menuItems, function (value, key) {\r\n                    if (value.text == 'Classes') {\r\n                        value.submenu = prepareSubmenuItems(obj.value.school_category_arms);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        function prepareSubmenuItems(school_cat_arms) {\r\n            var response = [];\r\n\r\n            angular.forEach(school_cat_arms, function (value, key) {\r\n                var item = {};\r\n                item.text = value.display_name;\r\n                item.sref = 'app.viewClassArm';\r\n                item.params = {id: value.id};\r\n\r\n                this.push(item);\r\n            }, response);\r\n\r\n            return response;\r\n        }\r\n\r\n        // Check item and children active state\r\n        var isActive = function (item) {\r\n\r\n            if (!item) return;\r\n\r\n            if (!item.sref || item.sref == '#') {\r\n                var foundActive = false;\r\n                angular.forEach(item.submenu, function (value, key) {\r\n                    if (isActive(value)) foundActive = true;\r\n                });\r\n                return foundActive;\r\n            }\r\n            else\r\n                return $state.is(item.sref) || $state.includes(item.sref);\r\n        };\r\n\r\n        // Load menu from json file\r\n        // -----------------------------------\r\n\r\n        $scope.getMenuItemPropClasses = function (item) {\r\n            return (item.heading ? 'nav-heading' : '') +\r\n                (isActive(item) ? ' active' : '');\r\n        };\r\n\r\n        $scope.loadSidebarMenu = function () {\r\n            $scope.menuItems = [\r\n                {\r\n                    \"text\": \"Main Navigation\",\r\n                    \"heading\": \"true\"\r\n                }\r\n            ];\r\n\r\n            angular.forEach(modules,function(value,key){\r\n                var temp = {\r\n                    \"text\": value.name,\r\n                    \"sref\": \"#\",\r\n                    \"icon\": \"fa fa-\"+value.name,\r\n                    'disable': !SchoolDataService.school.setup_complete,\r\n                    \"submenu\": []\r\n                };\r\n\r\n                angular.forEach(value.menu,function(item,key){\r\n                    temp.submenu.push({\r\n                        \"text\": item.name,\r\n                        \"sref\": \"app.\"+value.name+\".\"+item.route,\r\n                        'disable': !SchoolDataService.school.setup_complete\r\n                    });\r\n                });\r\n\r\n                this.push(temp);\r\n            },$scope.menuItems);\r\n\r\n            $scope.menuItems.push( {\r\n                \"text\": \"Settings\",\r\n                \"sref\": \"app.settings\",\r\n                \"icon\": \"fa fa-gears\"\r\n            });\r\n\r\n        };\r\n\r\n        $scope.loadSidebarMenu();\r\n\r\n        $scope.$on('refreshSchoolDataComplete',function(){\r\n            modules = SchoolDataService.school.loaded_modules;\r\n            $scope.loadSidebarMenu();\r\n        });\r\n\r\n        // Handle sidebar collapse items\r\n        // -----------------------------------\r\n\r\n        $scope.addCollapse = function ($index, item) {\r\n            collapseList[$index] = $rootScope.app.layout.asideHover ? true : !isActive(item);\r\n        };\r\n\r\n        $scope.isCollapse = function ($index) {\r\n            return (collapseList[$index]);\r\n        };\r\n\r\n        $scope.toggleCollapse = function ($index, isParentItem) {\r\n\r\n\r\n            // collapsed sidebar doesn't toggle drodopwn\r\n            if (Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover) return true;\r\n\r\n            // make sure the item index exists\r\n            if (angular.isDefined(collapseList[$index])) {\r\n                if (!$scope.lastEventFromChild) {\r\n                    collapseList[$index] = !collapseList[$index];\r\n                    closeAllBut($index);\r\n                }\r\n            }\r\n            else if (isParentItem) {\r\n                closeAllBut(-1);\r\n            }\r\n\r\n            $scope.lastEventFromChild = isChild($index);\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n        function closeAllBut(index) {\r\n            index += '';\r\n            for (var i in collapseList) {\r\n                if (index < 0 || index.indexOf(i) < 0)\r\n                    collapseList[i] = true;\r\n            }\r\n        }\r\n\r\n        function isChild($index) {\r\n            return (typeof $index === 'string') && !($index.indexOf('-') < 0);\r\n        }\r\n\r\n    }]);\r\n\r\n/**=========================================================\r\n * Module: navbar-search.js\r\n * Navbar search toggler * Auto dismiss on ESC key\r\n =========================================================*/\r\n\r\nApp.directive('searchOpen', ['navSearch', function (navSearch) {\r\n    'use strict';\r\n\r\n    return {\r\n        restrict: 'A',\r\n        controller: [\"$scope\", \"$element\", function ($scope, $element) {\r\n            $element\r\n                .on('click', function (e) {\r\n                    e.stopPropagation();\r\n                })\r\n                .on('click', navSearch.toggle);\r\n        }]\r\n    };\r\n\r\n}]).directive('searchDismiss', ['navSearch', function (navSearch) {\r\n    'use strict';\r\n\r\n    var inputSelector = '.navbar-form input[type=\"text\"]';\r\n\r\n    return {\r\n        restrict: 'A',\r\n        controller: [\"$scope\", \"$element\", function ($scope, $element) {\r\n\r\n            $(inputSelector)\r\n                .on('click', function (e) {\r\n                    e.stopPropagation();\r\n                })\r\n                .on('keyup', function (e) {\r\n                    if (e.keyCode == 27) // ESC\r\n                        navSearch.dismiss();\r\n                });\r\n\r\n            // click anywhere closes the search\r\n            $(document).on('click', navSearch.dismiss);\r\n            // dismissable options\r\n            $element\r\n                .on('click', function (e) {\r\n                    e.stopPropagation();\r\n                })\r\n                .on('click', navSearch.dismiss);\r\n        }]\r\n    };\r\n\r\n}]);\r\n\r\n\r\n/**=========================================================\r\n * Module: sidebar.js\r\n * Wraps the sidebar and handles collapsed state\r\n =========================================================*/\r\n\r\nApp.directive('sidebar', ['$rootScope', '$window', 'Utils', function ($rootScope, $window, Utils) {\r\n\r\n    var $win = $($window);\r\n    var $body = $('body');\r\n    var $scope;\r\n    var $sidebar;\r\n    var currentState = $rootScope.$state.current.name;\r\n\r\n    return {\r\n        restrict: 'EA',\r\n        template: '<nav class=\"sidebar\" ng-transclude></nav>',\r\n        transclude: true,\r\n        replace: true,\r\n        link: function (scope, element, attrs) {\r\n\r\n            $scope = scope;\r\n            $sidebar = element;\r\n\r\n            var eventName = Utils.isTouch() ? 'click' : 'mouseenter';\r\n            var subNav = $();\r\n            $sidebar.on(eventName, '.nav > li', function () {\r\n\r\n                if (Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover) {\r\n\r\n                    subNav.trigger('mouseleave');\r\n                    subNav = toggleMenuItem($(this));\r\n\r\n                    // Used to detect click and touch events outside the sidebar\r\n                    sidebarAddBackdrop();\r\n\r\n                }\r\n\r\n            });\r\n\r\n            scope.$on('closeSidebarMenu', function () {\r\n                removeFloatingNav();\r\n            });\r\n\r\n            // Normalize state when resize to mobile\r\n            $win.on('resize', function () {\r\n                if (!Utils.isMobile())\r\n                    $body.removeClass('aside-toggled');\r\n            });\r\n\r\n            // Adjustment on route changes\r\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\r\n                currentState = toState.name;\r\n                // Hide sidebar automatically on mobile\r\n                $('body.aside-toggled').removeClass('aside-toggled');\r\n\r\n                $rootScope.$broadcast('closeSidebarMenu');\r\n            });\r\n\r\n        }\r\n    };\r\n\r\n    function sidebarAddBackdrop() {\r\n        var $backdrop = $('<div/>', {'class': 'dropdown-backdrop'});\r\n        $backdrop.insertAfter('.aside-inner').on(\"click mouseenter\", function () {\r\n            removeFloatingNav();\r\n        });\r\n    }\r\n\r\n    // Open the collapse sidebar submenu items when on touch devices\r\n    // - desktop only opens on hover\r\n    function toggleTouchItem($element) {\r\n        $element\r\n            .siblings('li')\r\n            .removeClass('open')\r\n            .end()\r\n            .toggleClass('open');\r\n    }\r\n\r\n    // Handles hover to open items under collapsed menu\r\n    // -----------------------------------\r\n    function toggleMenuItem($listItem) {\r\n\r\n        removeFloatingNav();\r\n\r\n        var ul = $listItem.children('ul');\r\n\r\n        if (!ul.length) return $();\r\n        if ($listItem.hasClass('open')) {\r\n            toggleTouchItem($listItem);\r\n            return $();\r\n        }\r\n\r\n        var $aside = $('.aside');\r\n        var $asideInner = $('.aside-inner'); // for top offset calculation\r\n        // float aside uses extra padding on aside\r\n        var mar = parseInt($asideInner.css('padding-top'), 0) + parseInt($aside.css('padding-top'), 0);\r\n        var subNav = ul.clone().appendTo($aside);\r\n\r\n        toggleTouchItem($listItem);\r\n\r\n        var itemTop = ($listItem.position().top + mar) - $sidebar.scrollTop();\r\n        var vwHeight = $win.height();\r\n\r\n        subNav\r\n            .addClass('nav-floating')\r\n            .css({\r\n                position: $scope.app.layout.isFixed ? 'fixed' : 'absolute',\r\n                top: itemTop,\r\n                bottom: (subNav.outerHeight(true) + itemTop > vwHeight) ? 0 : 'auto'\r\n            });\r\n\r\n        subNav.on('mouseleave', function () {\r\n            toggleTouchItem($listItem);\r\n            subNav.remove();\r\n        });\r\n\r\n        return subNav;\r\n    }\r\n\r\n    function removeFloatingNav() {\r\n        $('.dropdown-backdrop').remove();\r\n        $('.sidebar-subnav.nav-floating').remove();\r\n        $('.sidebar li.open').removeClass('open');\r\n    }\r\n\r\n}]);\r\n/**=========================================================\r\n * Module: toggle-state.js\r\n * Toggle a classname from the BODY Useful to change a state that\r\n * affects globally the entire layout or more than one item\r\n * Targeted elements must have [toggle-state=\"CLASS-NAME-TO-TOGGLE\"]\r\n * User no-persist to avoid saving the sate in browser storage\r\n =========================================================*/\r\n\r\nApp.directive('toggleState', ['toggleStateService', function (toggle) {\r\n    'use strict';\r\n\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n\r\n            var $body = $('body');\r\n\r\n            $(element)\r\n                .on('click', function (e) {\r\n                    e.preventDefault();\r\n                    var classname = attrs.toggleState;\r\n\r\n                    if (classname) {\r\n                        if ($body.hasClass(classname)) {\r\n                            $body.removeClass(classname);\r\n                            if (!attrs.noPersist)\r\n                                toggle.removeState(classname);\r\n                        }\r\n                        else {\r\n                            $body.addClass(classname);\r\n                            if (!attrs.noPersist)\r\n                                toggle.addState(classname);\r\n                        }\r\n\r\n                    }\r\n\r\n                });\r\n        }\r\n    };\r\n\r\n}]);\r\n\r\n/**=========================================================\r\n * Module: browser.js\r\n * Browser detection\r\n =========================================================*/\r\n\r\nApp.service('browser', function () {\r\n    \"use strict\";\r\n\r\n    var matched, browser;\r\n\r\n    var uaMatch = function (ua) {\r\n        ua = ua.toLowerCase();\r\n\r\n        var match = /(opr)[\\/]([\\w.]+)/.exec(ua) ||\r\n            /(chrome)[ \\/]([\\w.]+)/.exec(ua) ||\r\n            /(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\r\n            /(webkit)[ \\/]([\\w.]+)/.exec(ua) ||\r\n            /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\r\n            /(msie) ([\\w.]+)/.exec(ua) ||\r\n            ua.indexOf(\"trident\") >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) ||\r\n            ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) ||\r\n            [];\r\n\r\n        var platform_match = /(ipad)/.exec(ua) ||\r\n            /(iphone)/.exec(ua) ||\r\n            /(android)/.exec(ua) ||\r\n            /(windows phone)/.exec(ua) ||\r\n            /(win)/.exec(ua) ||\r\n            /(mac)/.exec(ua) ||\r\n            /(linux)/.exec(ua) ||\r\n            /(cros)/i.exec(ua) ||\r\n            [];\r\n\r\n        return {\r\n            browser: match[3] || match[1] || \"\",\r\n            version: match[2] || \"0\",\r\n            platform: platform_match[0] || \"\"\r\n        };\r\n    };\r\n\r\n    matched = uaMatch(window.navigator.userAgent);\r\n    browser = {};\r\n\r\n    if (matched.browser) {\r\n        browser[matched.browser] = true;\r\n        browser.version = matched.version;\r\n        browser.versionNumber = parseInt(matched.version);\r\n    }\r\n\r\n    if (matched.platform) {\r\n        browser[matched.platform] = true;\r\n    }\r\n\r\n    // These are all considered mobile platforms, meaning they run a mobile browser\r\n    if (browser.android || browser.ipad || browser.iphone || browser[\"windows phone\"]) {\r\n        browser.mobile = true;\r\n    }\r\n\r\n    // These are all considered desktop platforms, meaning they run a desktop browser\r\n    if (browser.cros || browser.mac || browser.linux || browser.win) {\r\n        browser.desktop = true;\r\n    }\r\n\r\n    // Chrome, Opera 15+ and Safari are webkit based browsers\r\n    if (browser.chrome || browser.opr || browser.safari) {\r\n        browser.webkit = true;\r\n    }\r\n\r\n    // IE11 has a new token so we will assign it msie to avoid breaking changes\r\n    if (browser.rv) {\r\n        var ie = \"msie\";\r\n\r\n        matched.browser = ie;\r\n        browser[ie] = true;\r\n    }\r\n\r\n    // Opera 15+ are identified as opr\r\n    if (browser.opr) {\r\n        var opera = \"opera\";\r\n\r\n        matched.browser = opera;\r\n        browser[opera] = true;\r\n    }\r\n\r\n    // Stock Android browsers are marked as Safari on Android.\r\n    if (browser.safari && browser.android) {\r\n        var android = \"android\";\r\n\r\n        matched.browser = android;\r\n        browser[android] = true;\r\n    }\r\n\r\n    // Assign the name and platform variable\r\n    browser.name = matched.browser;\r\n    browser.platform = matched.platform;\r\n\r\n\r\n    return browser;\r\n\r\n});\r\n/**=========================================================\r\n * Module: colors.js\r\n * Services to retrieve global colors\r\n =========================================================*/\r\n\r\nApp.factory('colors', ['APP_COLORS', function (colors) {\r\n\r\n    return {\r\n        byName: function (name) {\r\n            return (colors[name] || '#fff');\r\n        }\r\n    };\r\n\r\n}]);\r\n\r\n/**=========================================================\r\n * Module: nav-search.js\r\n * Services to share navbar search functions\r\n =========================================================*/\r\n\r\nApp.service('navSearch', function () {\r\n    var navbarFormSelector = 'form.navbar-form';\r\n    return {\r\n        toggle: function () {\r\n\r\n            var navbarForm = $(navbarFormSelector);\r\n\r\n            navbarForm.toggleClass('open');\r\n\r\n            var isOpen = navbarForm.hasClass('open');\r\n\r\n            navbarForm.find('input')[isOpen ? 'focus' : 'blur']();\r\n\r\n        },\r\n\r\n        dismiss: function () {\r\n            $(navbarFormSelector)\r\n                .removeClass('open')      // Close control\r\n                .find('input[type=\"text\"]').blur() // remove focus\r\n                .val('')                    // Empty input\r\n            ;\r\n        }\r\n    };\r\n\r\n});\r\n/**=========================================================\r\n * Module: helpers.js\r\n * Provides helper functions for routes definition\r\n =========================================================*/\r\n\r\nApp.provider('RouteHelpers', ['APP_REQUIRES', function (appRequires) {\r\n    \"use strict\";\r\n\r\n    // Set here the base of the relative path\r\n    // for all app views\r\n    this.basepath = function (uri) {\r\n        return '/framework/app/views/' + uri;\r\n    };\r\n\r\n    // Generates a resolve object by passing script names\r\n    // previously configured in constant.APP_REQUIRES\r\n    this.resolveFor = function () {\r\n        var _args = arguments;\r\n        return {\r\n            deps: ['$ocLazyLoad', '$q', function ($ocLL, $q) {\r\n                // Creates a promise chain for each argument\r\n                var promise = $q.when(1); // empty promise\r\n                for (var i = 0, len = _args.length; i < len; i++) {\r\n                    promise = andThen(_args[i]);\r\n                }\r\n                return promise;\r\n\r\n                // creates promise to chain dynamically\r\n                function andThen(_arg) {\r\n                    // also support a function that returns a promise\r\n                    if (typeof _arg == 'function')\r\n                        return promise.then(_arg);\r\n                    else\r\n                        return promise.then(function () {\r\n                            // if is a module, pass the name. If not, pass the array\r\n                            var whatToLoad = getRequired(_arg);\r\n                            // simple error check\r\n                            if (!whatToLoad) return $.error('Route resolve: Bad resource name [' + _arg + ']');\r\n                            // finally, return a promise\r\n                            return $ocLL.load(whatToLoad);\r\n                        });\r\n                }\r\n\r\n                // check and returns required data\r\n                // analyze module items with the form [name: '', files: []]\r\n                // and also simple array of script files (for not angular js)\r\n                function getRequired(name) {\r\n                    if (appRequires.modules)\r\n                        for (var m in appRequires.modules)\r\n                            if (appRequires.modules[m].name && appRequires.modules[m].name === name)\r\n                                return appRequires.modules[m];\r\n                    return appRequires.scripts && appRequires.scripts[name];\r\n                }\r\n\r\n            }]\r\n        };\r\n    }; // resolveFor\r\n\r\n    // not necessary, only used in config block for routes\r\n    this.$get = function () {\r\n    };\r\n\r\n}]);\r\n\r\n\r\n/**=========================================================\r\n * Module: toggle-state.js\r\n * Services to share toggle state functionality\r\n =========================================================*/\r\n\r\nApp.service('toggleStateService', ['$rootScope', function ($rootScope) {\r\n\r\n    var storageKeyName = 'toggleState';\r\n\r\n    // Helper object to check for words in a phrase //\r\n    var WordChecker = {\r\n        hasWord: function (phrase, word) {\r\n            return new RegExp('(^|\\\\s)' + word + '(\\\\s|$)').test(phrase);\r\n        },\r\n        addWord: function (phrase, word) {\r\n            if (!this.hasWord(phrase, word)) {\r\n                return (phrase + (phrase ? ' ' : '') + word);\r\n            }\r\n        },\r\n        removeWord: function (phrase, word) {\r\n            if (this.hasWord(phrase, word)) {\r\n                return phrase.replace(new RegExp('(^|\\\\s)*' + word + '(\\\\s|$)*', 'g'), '');\r\n            }\r\n        }\r\n    };\r\n\r\n    // Return service public methods\r\n    return {\r\n        // Add a state to the browser storage to be restored later\r\n        addState: function (classname) {\r\n            var data = angular.fromJson($rootScope.$storage[storageKeyName]);\r\n\r\n            if (!data) {\r\n                data = classname;\r\n            }\r\n            else {\r\n                data = WordChecker.addWord(data, classname);\r\n            }\r\n\r\n            $rootScope.$storage[storageKeyName] = angular.toJson(data);\r\n        },\r\n\r\n        // Remove a state from the browser storage\r\n        removeState: function (classname) {\r\n            var data = $rootScope.$storage[storageKeyName];\r\n            // nothing to remove\r\n            if (!data) return;\r\n\r\n            data = WordChecker.removeWord(data, classname);\r\n\r\n            $rootScope.$storage[storageKeyName] = angular.toJson(data);\r\n        },\r\n\r\n        // Load the state string and restore the classlist\r\n        restoreState: function ($elem) {\r\n            var data = angular.fromJson($rootScope.$storage[storageKeyName]);\r\n\r\n            // nothing to restore\r\n            if (!data) return;\r\n            $elem.addClass(data);\r\n        }\r\n\r\n    };\r\n\r\n}]);\r\n/**=========================================================\r\n * Module: utils.js\r\n * Utility library to use across the theme\r\n =========================================================*/\r\n\r\nApp.service('Utils', [\"$window\", \"APP_MEDIAQUERY\", function ($window, APP_MEDIAQUERY) {\r\n    'use strict';\r\n\r\n    var $html = angular.element(\"html\"),\r\n        $win = angular.element($window),\r\n        $body = angular.element('body');\r\n\r\n    return {\r\n        // DETECTION\r\n        support: {\r\n            transition: (function () {\r\n                var transitionEnd = (function () {\r\n\r\n                    var element = document.body || document.documentElement,\r\n                        transEndEventNames = {\r\n                            WebkitTransition: 'webkitTransitionEnd',\r\n                            MozTransition: 'transitionend',\r\n                            OTransition: 'oTransitionEnd otransitionend',\r\n                            transition: 'transitionend'\r\n                        }, name;\r\n\r\n                    for (name in transEndEventNames) {\r\n                        if (element.style[name] !== undefined) return transEndEventNames[name];\r\n                    }\r\n                }());\r\n\r\n                return transitionEnd && {end: transitionEnd};\r\n            })(),\r\n            animation: (function () {\r\n\r\n                var animationEnd = (function () {\r\n\r\n                    var element = document.body || document.documentElement,\r\n                        animEndEventNames = {\r\n                            WebkitAnimation: 'webkitAnimationEnd',\r\n                            MozAnimation: 'animationend',\r\n                            OAnimation: 'oAnimationEnd oanimationend',\r\n                            animation: 'animationend'\r\n                        }, name;\r\n\r\n                    for (name in animEndEventNames) {\r\n                        if (element.style[name] !== undefined) return animEndEventNames[name];\r\n                    }\r\n                }());\r\n\r\n                return animationEnd && {end: animationEnd};\r\n            })(),\r\n            requestAnimationFrame: window.requestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame ||\r\n            window.mozRequestAnimationFrame ||\r\n            window.msRequestAnimationFrame ||\r\n            window.oRequestAnimationFrame ||\r\n            function (callback) {\r\n                window.setTimeout(callback, 1000 / 60);\r\n            },\r\n            touch: (\r\n            ('ontouchstart' in window && navigator.userAgent.toLowerCase().match(/mobile|tablet/)) ||\r\n            (window.DocumentTouch && document instanceof window.DocumentTouch) ||\r\n            (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) || //IE 10\r\n            (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0) || //IE >=11\r\n            false\r\n            ),\r\n            mutationobserver: (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || null)\r\n        },\r\n        // UTILITIES\r\n        isInView: function (element, options) {\r\n\r\n            var $element = $(element);\r\n\r\n            if (!$element.is(':visible')) {\r\n                return false;\r\n            }\r\n\r\n            var window_left = $win.scrollLeft(),\r\n                window_top = $win.scrollTop(),\r\n                offset = $element.offset(),\r\n                left = offset.left,\r\n                top = offset.top;\r\n\r\n            options = $.extend({topoffset: 0, leftoffset: 0}, options);\r\n\r\n            if (top + $element.height() >= window_top && top - options.topoffset <= window_top + $win.height() &&\r\n                left + $element.width() >= window_left && left - options.leftoffset <= window_left + $win.width()) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        },\r\n        langdirection: $html.attr(\"dir\") == \"rtl\" ? \"right\" : \"left\",\r\n        isTouch: function () {\r\n            return $html.hasClass('touch');\r\n        },\r\n        isSidebarCollapsed: function () {\r\n            return $body.hasClass('aside-collapsed');\r\n        },\r\n        isSidebarToggled: function () {\r\n            return $body.hasClass('aside-toggled');\r\n        },\r\n        isMobile: function () {\r\n            return $win.width() < APP_MEDIAQUERY.tablet;\r\n        }\r\n    };\r\n}]);\r\n// To run this code, edit file\r\n// index.html or index.jade and change\r\n// html data-ng-app attribute from\r\n// SchoolAdminApp to myAppName\r\n// -----------------------------------\r\n","var myAppRoutes = angular.module('SchoolAdminApp');\r\n\r\nmyAppRoutes.config(['$stateProvider', '$locationProvider', '$urlRouterProvider', 'RouteHelpersProvider', 'ViewBaseURL',\r\n    function ($stateProvider, $locationProvider, $urlRouterProvider, helper, ViewBaseURL) {\r\n        'use strict';\r\n\r\n        // Set the following to true to enable the HTML5 Mode\r\n        // You may have to set <base> tag in index and a routing configuration in your server\r\n        $locationProvider.html5Mode(false);\r\n\r\n        // default route\r\n        $urlRouterProvider.otherwise('/app/home');\r\n\r\n        //\r\n        // Application Routes\r\n        // -----------------------------------\r\n\r\n        $stateProvider\r\n            .state('app', {\r\n                url: '/app',\r\n                abstract: true,\r\n                templateUrl: ViewBaseURL + '/ui/app',\r\n                controller: 'AppController',\r\n                resolve: helper.resolveFor('modernizr', 'icons','toaster','ngDialog','parsley')\r\n            })\r\n            .state('app.home',\r\n            {\r\n                url: '/home',\r\n                templateUrl: ViewBaseURL + '/home',\r\n                resolve: helper.resolveFor('toaster','slimscroll'),\r\n                title: 'School Dashboard',\r\n                controller: 'HomeController'\r\n            })\r\n            .state('app.viewClassArm',\r\n            {\r\n                url: '/class/:id',\r\n                templateUrl: ViewBaseURL + '/pages/school_class',\r\n                title: 'Class Dashboard',\r\n                controller: ['$scope',\r\n                    function ($scope) {\r\n                    }\r\n                ]\r\n            })\r\n            .state('app.settings',\r\n            {\r\n                url: '/settings',\r\n                templateUrl: ViewBaseURL + '/settings/index',\r\n                title: 'Settings',\r\n                resolve: helper.resolveFor('xeditable','toaster','inputmask','taginput','filestyle','slimscroll'),\r\n                controller: ['$scope','editableOptions', 'editableThemes',\r\n                    function ($scope,editableOptions, editableThemes) {\r\n                        //template start\r\n                        editableOptions.theme = 'bs3';\r\n                        editableThemes.bs3.inputClass = 'input-xs';\r\n                        editableThemes.bs3.buttonsClass = 'btn-sm';\r\n                        editableThemes.bs3.submitTpl = '<button type=\"submit\" class=\"btn btn-success\"><span class=\"fa fa-check\"></span></button>';\r\n                        editableThemes.bs3.cancelTpl = '<button type=\"button\" class=\"btn btn-default\" ng-click=\"$form.$cancel()\">' +\r\n                        '<span class=\"fa fa-times text-muted\"></span>' +\r\n                        '</button>';\r\n                    }\r\n                ]\r\n            })\r\n            .state('app.settings.session_term',\r\n            {\r\n                url: '/session_term',\r\n                templateUrl: ViewBaseURL + '/settings/session_term',\r\n                title: 'Session & Term Settings',\r\n                controller: 'SettingsSessionTermController'\r\n            })\r\n            .state('app.settings.students',\r\n            {\r\n                url: '/students',\r\n                templateUrl: ViewBaseURL + '/settings/students',\r\n                title: 'Students Settings',\r\n                controller: 'SettingsStudentsController'\r\n            })\r\n            .state('app.settings.school',\r\n            {\r\n                url: '/school',\r\n                templateUrl: ViewBaseURL + '/settings/school',\r\n                title: 'School Settings',\r\n                controller: 'SettingsSchoolController'\r\n            })\r\n            .state('app.settings.staff',\r\n            {\r\n                url: '/staff',\r\n                templateUrl: ViewBaseURL + '/settings/staff',\r\n                title: 'Staff Settings',\r\n                controller: 'SettingsStaffController'\r\n            })\r\n            .state('app.settings.classes',\r\n            {\r\n                url: '/classes',\r\n                templateUrl: ViewBaseURL + '/settings/class',\r\n                title: 'Classes Settings',\r\n                controller: 'SettingsClassesController'\r\n            })\r\n            .state('app.settings.courses',\r\n            {\r\n                url: '/courses',\r\n                templateUrl: ViewBaseURL + '/settings/courses',\r\n                title: 'Courses Settings',\r\n                controller: 'SettingsCoursesController'\r\n            })\r\n            .state('app.settings.academics',\r\n            {\r\n                url: '/academics',\r\n                templateUrl: ViewBaseURL + '/settings/academics',\r\n                title: 'Academics Settings',\r\n                controller: 'SettingsAcademicsController'\r\n            })\r\n            .state('app.settings.reports',\r\n            {\r\n                url: '/reports',\r\n                templateUrl: ViewBaseURL + '/settings/reports',\r\n                title: 'Reports Settings',\r\n                controller: 'SettingsReportController'\r\n            })\r\n            .state('app.settings.financials',\r\n            {\r\n                url: '/financial',\r\n                templateUrl: ViewBaseURL + '/settings/financials',\r\n                title: 'Financial Settings',\r\n                controller: 'SettingsFinancialController'\r\n            })\r\n            .state('app.settings.notifications',\r\n            {\r\n                url: '/notifications',\r\n                templateUrl: ViewBaseURL + '/settings/notifications',\r\n                title: 'Notification Settings',\r\n                controller: 'SettingsNotificationController'\r\n            })\r\n            .state('app.settings.administrators',\r\n            {\r\n                url: '/administrators',\r\n                templateUrl: ViewBaseURL + '/settings/administrators',\r\n                title: 'Administrators Settings',\r\n                controller: 'SettingsAdministratorsController'\r\n            });\r\n}]);","App.factory('SchoolService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/school/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'},\r\n        'updateFirstTimeLoginState': {method: 'PUT', params: {'action': 'update_first_time_login_state'}}\r\n    });\r\n}]);\r\n\r\nApp.factory('SchoolProfileService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/school-profile/:id', {id: '@id'});\r\n}]);\r\n\r\n\r\n\r\n//\r\nApp.factory('CategoryClassSettingsService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/category-class-settings/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'},\r\n        'addCategory': {method: 'POST',params: {'action': 'school_category'}},\r\n        'updateCategory': {method: 'PUT',params: {'action': 'school_category'}},\r\n        'addCategoryArm': {method: 'POST',params: {'action': 'school_category_arms'}},\r\n        'updateCategoryArm': {method: 'PUT',params: {'action': 'school_category_arms'}},\r\n        'addCategoryArmSubDivision': {method: 'POST',params: {'action': 'school_category_arm_subarms'}},\r\n        'updateCategoryArmSubDivision': {method: 'PUT',params: {'action': 'school_category_arm_subarms'}},\r\n        'removeCategory': {method: 'DELETE',params: {'action': 'school_category'}},\r\n        'removeCategoryArm': {method: 'DELETE',params: {'action': 'school_category_arms'}},\r\n        'removeCategoryArmSubDivision': {method: 'DELETE',params: {'action': 'school_category_arm_subarms'}},\r\n        'removeAllCategoryArmSubDivisions': {method: 'DELETE',params: {'action': 'remove_all_school_category_arm_subarms'}},\r\n        'getAssignedGradingSystem': {method: 'GET',params: {'action': 'assignGradingSystem'}}\r\n    });\r\n}]);\r\n\r\nApp.factory('GradingSystemService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/grading-systems/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'},\r\n        'assignGradingSystem': {method: 'POST',params: {'action': 'assignGradingSystem'}},\r\n        'getAssignedGradingSystem': {method: 'GET',params: {'action': 'assignGradingSystem'}}\r\n    });\r\n}]);\r\n\r\n//\r\nApp.factory('CoursesSettingsService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/courses-settings/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'},\r\n        'assignCourse': {method: 'PUT',params: {'action': 'assign_course'}},\r\n        'getCourseCategory': {method: 'GET',params: {'action': 'add_course_category'},'isArray': true},\r\n        'addCourseCategory': {method: 'POST',params: {'action': 'add_course_category'}},\r\n        'removeCourseCategory': {method: 'DELETE',params: {'action': 'add_course_category'}}\r\n    });\r\n}]);\r\n\r\nApp.factory('StaffService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/staff-settings/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'},\r\n        'assign_courses': {method: 'PUT',params: {'action': 'action_assign_course'}},\r\n        'assign_classes': {method: 'PUT',params: {'action': 'action_assign_class'}}\r\n    });\r\n}]);\r\n\r\n\r\nApp.factory('GradeAssessmentSystemService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/grade-assessment-systems/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'},\r\n        'assignGradeAssessmentSystem': {method: 'POST',params: {'action': 'assignGradeAssessmentSystem'}},\r\n        'getAssignedGradeAssessmentSystem': {method: 'GET',params: {'action': 'assignGradeAssessmentSystem'}}\r\n    });\r\n}]);\r\n\r\n\r\nApp.factory('BehaviourAssessmentSystemService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/behaviour-assessment-systems/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'}\r\n    });\r\n}]);\r\n\r\nApp.factory('SkillAssessmentSystemService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/skill-assessment-systems/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'}\r\n    });\r\n}]);\r\n\r\nApp.factory('SessionTermsSettingsService', ['$resource', function ($resource) {\r\n    return $resource('/admin/resources/sessions-terms-settings/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'},\r\n        'saveSubSessionDates': {method: 'POST',params: {'action': 'sub_session_start_and_end_dates'}},\r\n        'addSubSession': {method: 'POST',params: {'action': 'add_sub_session'}},\r\n        'removeSubSession': {method: 'DELETE',params: {'action': 'add_sub_session'}}\r\n    });\r\n}]);\r\n\r\nApp.service('TableDataService', ['SchoolDataService', function (SchoolDataService) {\r\n\r\n    var TableData = {\r\n        cache: SchoolDataService.schools,\r\n        getData: function ($defer, params) {\r\n\r\n            filterdata($defer, params);\r\n\r\n            function filterdata($defer, params) {\r\n                var from = (params.page() - 1) * params.count();\r\n                var to = params.page() * params.count();\r\n                var filteredData = TableData.cache.slice(from, to);\r\n\r\n                params.total(TableData.cache.length);\r\n                $defer.resolve(filteredData);\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    return TableData;\r\n\r\n}]);\r\n\r\nApp.factory('SchoolContextService', ['$rootScope', function ($rootScope) {\r\n    var context = {\r\n        'school_category': 'all',\r\n        'category_level': 'all',\r\n        'level_class': 'all'\r\n    };\r\n\r\n    return {\r\n        setContext: function(newContext){\r\n            context = newContext;\r\n            $rootScope.$broadcast('SCHOOL_CONTEXT_CHANGED',newContext);\r\n        },\r\n        getContext: function(){\r\n            return context;\r\n        }\r\n    }\r\n}]);","/**\r\n * Created by Ak on 4/28/2015.\r\n */\r\n\r\n\r\nApp.controller('AddSessionDialogController',['$scope','SessionTermsSettingsService','toaster',\r\n    function ($scope,SessionTermsSettingsService,toaster) {\r\n        var last_year = 2014;\r\n        var next_year = 2015;\r\n\r\n        $scope.current = {\r\n            loading: false,\r\n            saving: false,\r\n            current_session: \"\"+ last_year+ \"/\" +next_year\r\n        };\r\n\r\n        $scope.nextSession = function (current) {\r\n            current.current_session = calculateNextSession();\r\n        };\r\n\r\n        $scope.lastSession = function (current) {\r\n            current.current_session = calculateLastSession();\r\n        };\r\n\r\n\r\n        var calculateNextSession = function () {\r\n            last_year += 1;\r\n            next_year += 1;\r\n\r\n            return \"\"+ last_year+ \"/\" +next_year;\r\n        };\r\n\r\n        var calculateLastSession = function () {\r\n            last_year -= 1;\r\n            next_year -= 1;\r\n\r\n            return \"\"+ last_year+ \"/\" +next_year;\r\n        };\r\n\r\n\r\n        $scope.saveCurrentSessionTerm = function (current,callback) {\r\n            current.saving = true;\r\n            SessionTermsSettingsService.save(current, function (response) {\r\n                console.log('Saved Changes');\r\n                toaster.pop('success', \"Current Session & Term\", \"Changes Saved Succesfully\");\r\n                current.saving = false;\r\n                $scope.$emit('refreshSchoolData');\r\n                callback();\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"Current Session & Term\", \"Failed to save changes, Try Again\");\r\n                current.saving = false;\r\n            });\r\n        };\r\n    }]\r\n);","/* global App */\r\n/**\r\n * Created by Ak on 4/7/2015.\r\n */\r\n\r\nApp.controller('HomeController',['$scope','SchoolDataService','$window','$rootScope','SchoolService','toaster',\r\n    function ($scope,SchoolDataService,$window,$rootScope,SchoolService,toaster) {\r\n        $scope.school = SchoolDataService.school;\r\n        console.log($scope.school);\r\n\r\n        $rootScope.$on('SCHOOL_CONTEXT_CHANGED',function(event,obj){\r\n            console.log('I hear ya @ HomeController');\r\n        });\r\n        \r\n        $scope.updateFirstTimeLoginState = function(){\r\n            SchoolService.updateFirstTimeLoginState({id: $scope.school.id},{}).$promise.then(function(){\r\n                $scope.$emit('refreshSchoolData'); \r\n            },function(){\r\n                toaster.pop('error', \"School Status Update\", \"Failed Saving changes\");\r\n            });\r\n        };\r\n\r\n        $scope.$on('refreshSchoolDataComplete',function(){\r\n            $scope.school = SchoolDataService.school;\r\n        });\r\n    }]\r\n);\r\n\r\n","var app = angular.module('SchoolAdminApp');\r\n/**\r\n * Controllers\r\n *\r\n */\r\n\r\napp.controller('NavBarController', [\r\n        '$scope', '$rootScope', 'SchoolDataService','SchoolContextService','$parse',\r\n        function ($scope, $rootScope, SchoolDataService,SchoolContextService,$parse) {\r\n            var context = {\r\n                'school_category': 'all',\r\n                'category_level': 'all',\r\n                'level_class': 'all'\r\n            };\r\n\r\n            $scope.schoolCategories =  SchoolDataService.school.school_type.school_categories;\r\n            $scope.selectedSchoolCategory = $scope.schoolCategories[0];\r\n            $scope.classItems = {\r\n                submenu: $scope.selectedSchoolCategory.school_category_arms,\r\n                selected: $scope.selectedSchoolCategory.school_category_arms[0]\r\n            };\r\n\r\n            $scope.prepareAllSchoolCategory = function ($event){\r\n                    $scope.selectedSchoolCategory = null;\r\n                    $event.preventDefault();\r\n            };\r\n\r\n            $scope.prepareSchoolCategory = function ($event, category) {\r\n                $scope.selectedSchoolCategory = category;\r\n                $event.preventDefault();\r\n            };\r\n\r\n            $scope.prepareSchoolLevel = function ($event, level) {\r\n                $scope.classItems.selected = level;\r\n                $event.preventDefault();\r\n            };\r\n\r\n\r\n            $scope.$watch('selectedSchoolCategory', function (newV, oldV) {\r\n                console.log('selectedSchoolCategoryChanged event');\r\n                $rootScope.$broadcast('selectedSchoolCategoryChanged', {value: newV});\r\n                console.log('selectedSchoolCategoryChanged raised');\r\n            });\r\n\r\n\r\n            $rootScope.$on('selectedSchoolCategoryChanged', function (event, obj) {\r\n                console.log('event selectedSchoolCat received');\r\n\r\n                if (angular.isDefined($scope.classItems) && angular.isDefined(obj.value) && obj.value !== null) {\r\n                    $scope.classItems.submenu = obj.value.school_category_arms;\r\n                    $scope.classItems.selected = obj.value.school_category_arms[0];\r\n                    context.school_category = obj.value;\r\n                    context.category_level = obj.value.school_category_arms[0];\r\n                    SchoolContextService.setContext(context);\r\n                }else{\r\n                    SchoolContextService.setContext(null);\r\n                }\r\n            });\r\n        }]\r\n);\r\n\r\n\r\n/**-------------------------------------------------------------------------------\r\n * Settings Controllers Start\r\n * -----------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * Session and Term Settings Controller\r\n */\r\napp.controller('SettingsSessionTermController', ['$scope', 'SchoolDataService','SessionTermsSettingsService','toaster',\r\n    function ($scope, SchoolDataService,SessionTermsSettingsService,toaster) {\r\n        $scope.sessions = getSessionsFrom(SchoolDataService);\r\n        $scope.sub_sessions = SchoolDataService.school.session_type.sub_sessions;\r\n        $scope.current = {loading: true,saving: false};\r\n\r\n        SessionTermsSettingsService.get({},function(response){\r\n            $scope.current = response;\r\n            $scope.loading = false;\r\n            $scope.saving = false;\r\n\r\n        },function(error){\r\n                $scope.loading = false;\r\n                toaster.pop('error', \"Current Session & Term\", \"Failed to Load Current Session & Term, Try Again\");\r\n        });\r\n\r\n\r\n        $scope.saveCurrentSessionTerm = function(current){\r\n            current.saving = true;\r\n            SessionTermsSettingsService.save(current,function (response) {\r\n                console.log('Saved Changes');\r\n                toaster.pop('success', \"Current Session & Term\", \"Changes Saved Succesfully\");\r\n                current.saving = false;\r\n                $scope.$emit('refreshSchoolData');\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"Current Session & Term\", \"Failed to save changes, Try Again\");\r\n                current.saving = false;\r\n            });\r\n        };\r\n\r\n        $scope.saveSubSessionsDate = function(subSessions){\r\n            subSessions.saving = true;\r\n            SessionTermsSettingsService.saveSubSessionDates({'sub_sessions': subSessions}).$promise.then(function (response) {\r\n                console.log('Saved Changes');\r\n                toaster.pop('success', \"Term Start & End Date\", \"Changes Saved Succesfully\");\r\n                subSessions.saving = false;\r\n                $scope.$emit('refreshSchoolData');\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"Term Start & End Date\", \"Failed to save changes, Try Again\");\r\n                subSessions.saving = false;\r\n            });\r\n        };\r\n\r\n\r\n        $scope.addNewTerm = function(term){\r\n            var callback  = function(){\r\n                $scope.onAddTerm = false;\r\n                $scope.term.name = null;\r\n            };\r\n\r\n            term.saving = true;\r\n            //addSubSession\r\n            SessionTermsSettingsService.addSubSession(term).$promise.then(function (response) {\r\n                console.log('Saved Changes');\r\n                toaster.pop('success', \"Manage Term\", \"Saved Succesfully\");\r\n                term.saving = false;\r\n                $scope.sub_sessions = response.all;\r\n                callback();\r\n                $scope.$emit('refreshSchoolData');\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"Manage Term\", \"Failed to save, Try Again\");\r\n                term.saving = false;\r\n            });\r\n        };\r\n\r\n        $scope.removeTerm = function(term){\r\n            term.saving = true;\r\n            SessionTermsSettingsService.removeSubSession({id: term.id}, term).$promise.then(function (response) {\r\n                console.log('Saved Changes');\r\n                toaster.pop('success', \"Manage Term\", \"Removed Succesfully\");\r\n                term.saving = false;\r\n                $scope.sub_sessions = response.all;\r\n                $scope.$emit('refreshSchoolData');\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"Manage Term\", \"Failed to remove, Try Again\");\r\n                term.saving = false;\r\n            });\r\n        };\r\n\r\n\r\n        $scope.$on('refreshSchoolDataComplete',function(){\r\n            $scope.sessions = getSessionsFrom(SchoolDataService);\r\n            $scope.sub_sessions = SchoolDataService.school.session_type.sub_sessions;\r\n        });\r\n\r\n        function getSessionsFrom(SchoolDataService) {\r\n            return SchoolDataService.school.sessions.sort(function (a, b) {\r\n                if (a.name < b.name) {\r\n                    return -1;\r\n                }\r\n                if (a.name > b.name) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        };\r\n\r\n        $scope.openStartDate = function($event,sub_session){\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n            sub_session.startDateOpened = true;\r\n        };\r\n\r\n        $scope.openEndDate = function($event,sub_session){\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n            sub_session.endDateOpened = true;\r\n        };\r\n    }\r\n]);\r\n\r\n/**\r\n * Students Settings Controller\r\n */\r\n\r\napp.controller('SettingsStudentsController', ['$scope', 'SchoolDataService',\r\n    function ($scope, SchoolDataService) {\r\n        $scope.sessions = getSessionsFrom(SchoolDataService);\r\n        $scope.sub_sessions = SchoolDataService.school.session_type.sub_sessions;\r\n        $scope.form = {\r\n            school_category: null\r\n        };\r\n\r\n\r\n        function getSessionsFrom(SchoolDataService) {\r\n            return SchoolDataService.school.sessions.sort(function (a, b) {\r\n                if (a.name < b.name) {\r\n                    return -1;\r\n                }\r\n                if (a.name > b.name) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n    }\r\n]);\r\n\r\n/**\r\n * School Settings Controller\r\n *\r\n */\r\n\r\napp.controller('SettingsSchoolController', ['$scope', 'SchoolDataService','SchoolProfileService','toaster',\r\n    function ($scope, SchoolDataService, SchoolProfileService,toaster) {\r\n\r\n        $scope.school = SchoolDataService.school;\r\n        $scope.school.school_profile = $scope.school.school_profile || {};\r\n        $scope.school.school_profile.name = $scope.school.name;\r\n\r\n        if(angular.isUndefined($scope.school.school_profile.logo) || $scope.school.school_profile.logo === null){\r\n            $scope.school.school_profile.logo = {dataURL: '/img/placeholder.jpg'};\r\n        }\r\n\r\n        $scope.saveSchoolProfile = function(school) {\r\n            school.saving = true;\r\n            SchoolProfileService.save(school,function(data){\r\n                console.log('success');\r\n                school.saving = false;\r\n                toaster.pop('success', \"School Profile\", \"Changes Saved Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n            },function(data){\r\n                school.saving = false;\r\n                console.log('failure');\r\n                toaster.pop('error', \"School Profile\", \"Failed Saving Changes\");\r\n            });\r\n        };\r\n\r\n\r\n        $scope.$on('refreshSchoolDataComplete',function(event){\r\n            $scope.school = SchoolDataService.school;\r\n            $scope.school.school_profile = $scope.school.school_profile || {};\r\n            $scope.school.school_profile.name = $scope.school.name;\r\n        });\r\n    }\r\n]);\r\n\r\n/**\r\n * Staff Settings Controller\r\n */\r\n\r\n\r\napp.controller('SettingsStaffController', [\r\n    '$scope', 'SchoolDataService','StaffService','toaster','CoursesSettingsService',\r\n    function ($scope, SchoolDataService,StaffService,toaster,CoursesSettingsService) {\r\n        $scope.classes = SchoolDataService.school.school_type.classes;\r\n        $scope.classes.selected = $scope.classes[0];\r\n\r\n        $scope.staffs = {loading: true};\r\n\r\n        StaffService.query({},function(response){\r\n            $scope.staffs.loading = true;\r\n            $scope.staffs = response;\r\n\r\n        },function(data){\r\n            $scope.staffs.loading = false;\r\n        });\r\n\r\n        $scope.courses = {loading: true};\r\n\r\n        CoursesSettingsService.query({},function(response){\r\n\r\n            $scope.courses.loading = false;\r\n            $scope.courses = response;\r\n            $scope.courses.selected = response[0];\r\n\r\n        },function(err){\r\n            $scope.courses.loading = false;\r\n        });\r\n\r\n        $scope.currentStaff = null;\r\n\r\n        $scope.selectCourse = function(event,course,courses){\r\n            courses.selected = course;\r\n            event.preventDefault();\r\n        };\r\n\r\n        $scope.selectClass = function(event,arm,classes){\r\n            classes.selected = arm;\r\n            event.preventDefault();\r\n        };\r\n\r\n        $scope.setCurrentStaff = function($event,staff){\r\n            $scope.currentStaff = staff;\r\n            $scope.currentStaff.assigned_courses = $scope.currentStaff.assigned_courses || [];\r\n            $scope.currentStaff.assigned_classes = $scope.currentStaff.assigned_classes || [];\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n        };\r\n\r\n        $scope.saveStaff = function (staff) {\r\n            console.log(staff);\r\n            StaffService.save(staff,function(response){\r\n                toaster.pop('success', \"Add Staff\", \"Changes Saved Succesfully\");\r\n            },function(error){\r\n                toaster.pop('error', \"Add Staff\", \"failed to Save Changes\");\r\n            });\r\n        };\r\n\r\n        $scope.assignCourses = function (staff,courses){\r\n            staff.saving  = true;\r\n            StaffService.assign_courses({id: staff.id},{assigned_courses: courses}).$promise.then(function(response){\r\n                staff.saving = false;\r\n                staff  = response;\r\n                toaster.pop('success', \"Add Staff\", \"Changes Saved Succesfully\");\r\n            },function(error){\r\n                staff.saving = false;\r\n                toaster.pop('error', \"Add Staff\", \"failed to Save Changes\");\r\n            });\r\n        };\r\n\r\n        $scope.assignClasses = function (staff,classes){\r\n            staff.saving  = true;\r\n            StaffService.assign_classes({id: staff.id},{assigned_classes: classes}).$promise.then(function(response){\r\n                staff.saving = false;\r\n                staff  = response;\r\n                toaster.pop('success', \"Add Staff\", \"Changes Saved Succesfully\");\r\n            },function(error){\r\n                staff.saving = false;\r\n                toaster.pop('error', \"Add Staff\", \"failed to Save Changes\");\r\n            });\r\n        };\r\n    }\r\n]);\r\n\r\n/**\r\n * Classes Settings Controller\r\n */\r\n\r\napp.controller('SettingsClassesController', ['$scope', 'SchoolDataService','CategoryClassSettingsService','toaster','editableThemes','editableOptions',\r\n    function ($scope, SchoolDataService,CategoryClassSettingsService,toaster,editableThemes,editableOptions) {\r\n\r\n        //template start\r\n        editableOptions.theme = 'bs3';\r\n        editableThemes.bs3.inputClass = 'input-xs';\r\n        editableThemes.bs3.buttonsClass = 'btn-xs';\r\n        editableThemes.bs3.submitTpl = '<button type=\"submit\" class=\"btn btn-success\" ng-click=\"updateSubArmName($data,arm)\"><span class=\"fa fa-check\"></span></button>';\r\n        editableThemes.bs3.cancelTpl = '<button type=\"button\" class=\"btn btn-default\" ng-click=\"$form.$cancel()\">' +\r\n        '<span class=\"fa fa-times text-muted\"></span>' +\r\n        '</button>';\r\n\r\n        $scope.school = SchoolDataService.school;\r\n\r\n        $scope.removeSchoolCategory = function (school_type, indexToRemove) {\r\n            var parcel =  school_type.school_categories[indexToRemove];\r\n            console.log(school_type);\r\n            parcel.saving = true;\r\n\r\n            CategoryClassSettingsService.removeCategory({id: parcel.id}).$promise.then(function (response) {\r\n\r\n                console.log('Saved Changes');\r\n                parcel.saving = false;\r\n                school_type.school_categories.splice(indexToRemove, 1);\r\n                toaster.pop('success', \"School Category\", \"Changes Saved Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n\r\n            }, function (data) {\r\n\r\n                console.log('could not save changes');\r\n                parcel.saving = false;\r\n                toaster.pop('error', \"School Category\", \"Failed to save changes, Try Again\");\r\n\r\n            });\r\n\r\n        };\r\n\r\n        $scope.addSchoolCategory = function (school_type, school_category) {\r\n            console.log(school_type);\r\n\r\n            var parcel = {\r\n                'school_type_id': school_type.id,\r\n                'name': school_category.name\r\n            };\r\n\r\n            school_category.saving = true;\r\n\r\n            CategoryClassSettingsService.addCategory(parcel).$promise.then(function (response) {\r\n\r\n                console.log('Saved Changes');\r\n                school_type.school_categories.splice(0,0,response.model);\r\n                school_category.saving = false;\r\n                school_category.name = '';\r\n                toaster.pop('success', \"School Category\", \"Changes Saved Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n\r\n            }, function (data) {\r\n\r\n                console.log('could not save changes');\r\n                school_category.saving = false;\r\n                toaster.pop('error', \"School Category\", \"Failed to save changes, Try Again\");\r\n\r\n            });\r\n        };\r\n\r\n        $scope.createArmSubdivision = function(baseName, school_arm) {\r\n\r\n            school_arm.school_category_arm_subdivisions = school_arm.school_category_arm_subdivisions || [];\r\n\r\n            if(school_arm.school_category_arm_subdivisions.length === 1){\r\n                school_arm.school_category_arm_subdivisions[0] = {\r\n                    'name': baseName + '_' + indexToChar(1),\r\n                    'display_name': baseName + ' ' + indexToChar(1)\r\n                };\r\n            }\r\n\r\n            school_arm.school_category_arm_subdivisions.push({\r\n                    'name': baseName + '_' + indexToChar(school_arm.school_category_arm_subdivisions.length + 1),\r\n                    'display_name': baseName + ' ' + indexToChar(school_arm.school_category_arm_subdivisions.length + 1)\r\n                }\r\n            );\r\n\r\n            //Ready to save newly added arms\r\n            school_arm.can_save_subdivision_state = true;\r\n\r\n            console.log($scope.school.school_type);\r\n        };\r\n\r\n        $scope.saveArmSubDivision = function(school_arm,index){\r\n            var parcel = {\r\n                'school_category_arm': school_arm\r\n            };\r\n\r\n            CategoryClassSettingsService.addCategoryArmSubDivision(parcel).$promise.then(function (response) {\r\n                console.log('Saved Changes');\r\n                toaster.pop('success', \"School Category\", \"Changes Saved Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n\r\n                //Ready to save newly added arms\r\n                school_arm.can_save_subdivision_state = false;\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"School Category\", \"Failed to save changes, Try Again\");\r\n            });\r\n        };\r\n\r\n        $scope.updateSubArmName  = function ($data,arm){\r\n            arm.saving = true;\r\n            var backup_previous_display_name = arm.display_name;\r\n\r\n            arm.display_name = $data;\r\n\r\n            CategoryClassSettingsService.updateCategoryArmSubDivision({id: arm.id},arm).$promise.then(function (response) {\r\n                console.log('Saved Changes');\r\n                toaster.pop('success', \"School Sub-Arm\", \"Changes Saved Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n\r\n                arm.saving = false;\r\n\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"School Sub-Arm\", \"Failed to save changes, Try Again\");\r\n                arm.saving = false;\r\n\r\n                arm.display_name = backup_previous_display_name;\r\n\r\n            });\r\n\r\n            console.log($data);\r\n            console.log(arm);\r\n        };\r\n\r\n\r\n        $scope.removeArmSubDivision = function (school_category_arm_subdivisions,index,arm){\r\n            var parcel = school_category_arm_subdivisions[index];\r\n\r\n            if(school_category_arm_subdivisions.length > 2) {\r\n                CategoryClassSettingsService.removeCategoryArmSubDivision(parcel).$promise.then(function (response) {\r\n                    console.log('Saved Changes');\r\n                    school_category_arm_subdivisions.splice(index, 1);\r\n                    toaster.pop('success', \"School Category Arm Subdivision\", \"Changes Saved Succesfully\");\r\n                    $scope.$emit('refreshSchoolData');\r\n                }, function (data) {\r\n                    console.log('could not save changes');\r\n                    toaster.pop('error', \"School Category Arm Subdivision\", \"Failed to save changes, Try Again\");\r\n                });\r\n            }else{\r\n                CategoryClassSettingsService.removeAllCategoryArmSubDivisions({id: parcel.scoped_school_category_arm_id}).$promise.then(function (response) {\r\n                    console.log('Saved Changes');\r\n                    school_category_arm_subdivisions.splice(0, 2);\r\n                    arm.has_subdivisions = false;\r\n                    toaster.pop('success', \"School Category Arm Subdivision\", \"Changes Saved Succesfully\");\r\n                }, function (data) {\r\n                    console.log('could not save changes');\r\n                    toaster.pop('error', \"School Category Arm Subdivision\", \"Failed to save changes, Try Again\");\r\n                });\r\n            }\r\n        };\r\n\r\n        $scope.removeArm = function (school_category_arms, index) {\r\n            var parcel = school_category_arms[index];\r\n\r\n            CategoryClassSettingsService.removeCategoryArm({id: parcel.id}).$promise.then(function (response) {\r\n                console.log('Saved Changes');\r\n                school_category_arms.splice(index, 1);\r\n                toaster.pop('success', \"School Category Arm\", \"Changes Saved Succesfully\");\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"School Category Arm\", \"Failed to save changes, Try Again\");\r\n            });\r\n\r\n        };\r\n\r\n        $scope.addArm = function (school_category, school_category_name) {\r\n            var parcel = {\r\n                'school_category_id': school_category.id,\r\n                'name': school_category_name\r\n            };\r\n\r\n            CategoryClassSettingsService.addCategoryArm(parcel).$promise.then(function (response) {\r\n                console.log('Saved Changes');\r\n                school_category.school_category_arms.push(response.model);\r\n                toaster.pop('success', \"School Category Arm\", \"Changes Saved Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"School Category Arm\", \"Failed to save changes, Try Again\");\r\n            });\r\n        };\r\n\r\n        $scope.saveSchoolCategoryEditMode = function ($event, school_arm) {\r\n            school_arm.edit = false;\r\n            school_arm.updating = true;\r\n\r\n            CategoryClassSettingsService.updateCategoryArm({id: school_arm.id},school_arm).$promise.then(function (response) {\r\n                console.log('Saved Changes');\r\n                toaster.pop('success', \"School Category Arm\", \"Changes Saved Successfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n                school_arm.updating = false;\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"School Category Arm\", \"Failed to save changes, Try Again\");\r\n                school_arm.updating = false;\r\n            });\r\n\r\n            $event.preventDefault();\r\n            $event.stopProgation();\r\n        };\r\n        \r\n        function indexToChar(index){\r\n            var chars = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\r\n            return chars[index-1];\r\n        }\r\n\r\n        $scope.$on('refreshSchoolDataComplete',function(event){\r\n            $scope.school = SchoolDataService.school;\r\n        });\r\n\r\n    }\r\n]);\r\n\r\n/**\r\n\r\n Courses Settings Controller\r\n */\r\n\r\napp.controller('SettingsCoursesController', ['$scope', 'SchoolDataService','CoursesSettingsService','toaster',\r\n    function ($scope, SchoolDataService,CoursesSettingsService,toaster) {\r\n        $scope.school_categories = SchoolDataService.getCourseCategories();\r\n        $scope.courses = CoursesSettingsService.query();\r\n        $scope.course_categories = CoursesSettingsService.getCourseCategory();\r\n\r\n        $scope.unAssignCourses = function(school_category_id, assigned_courses,courses_to_unassign){\r\n            console.log('unAssign Courses Called');\r\n            var stateChanged = false;\r\n\r\n            console.log(assigned_courses);\r\n\r\n            angular.forEach(courses_to_unassign,function(value,key){\r\n                console.log(value);\r\n                if(inArray(assigned_courses,value)){\r\n                    assigned_courses.pop(value);\r\n                    stateChanged = true;\r\n                }\r\n            });\r\n\r\n            if(stateChanged) {\r\n                CoursesSettingsService.assignCourse(\r\n                    {id: school_category_id},\r\n                    {'assigned_courses': assigned_courses}).$promise.then(\r\n                    function (response) {\r\n                        toaster.pop('success', 'Course UnAssignment', 'UnAssigned Successfully');\r\n                        $scope.$emit('refreshSchoolData');\r\n                    }, function (response) {\r\n                        toaster.pop('error', 'Course UnAssignment', 'Failed to UnAssign');\r\n                    }\r\n                );\r\n            }\r\n\r\n\r\n        };\r\n\r\n        $scope.assignCourses = function(school_category_id, assigned_courses,courses_to_assign){\r\n            console.log('Assign Courses Called');\r\n            var stateChanged = false;\r\n            assigned_courses = assigned_courses || [];\r\n\r\n            console.log(assigned_courses);\r\n\r\n            angular.forEach(courses_to_assign,function(value,key){\r\n                console.log(value);\r\n                if(!inArray(assigned_courses,value)){\r\n                    assigned_courses.push(value);\r\n                    stateChanged = true;\r\n                }\r\n            });\r\n\r\n            if(stateChanged) {\r\n                CoursesSettingsService.assignCourse(\r\n                    {id: school_category_id},\r\n                    {'assigned_courses': assigned_courses}).$promise.then(\r\n                    function (response) {\r\n                        toaster.pop('success', 'Course Assignment', 'Assigned Successfully');\r\n                        $scope.$emit('refreshSchoolData');\r\n                    }, function (response) {\r\n                        toaster.pop('error', 'Course Assignment', 'Failed to Assign');\r\n                    }\r\n                );\r\n            }\r\n\r\n\r\n        };\r\n\r\n        $scope.createCourseCategory = function(school_category_id,courseCategory){\r\n            var parcel = {\r\n                'name': courseCategory.name,\r\n                'school_category_id': school_category_id\r\n            };\r\n\r\n            courseCategory.saving = true;\r\n\r\n            CoursesSettingsService.addCourseCategory(parcel).$promise.then(function(response){\r\n                courseCategory.saving = false;\r\n                toaster.pop('success', 'Course Category','Added Successfully');\r\n                $scope.$emit('refreshSchoolData');\r\n\r\n                $scope.course_categories = response.all;\r\n            },function(response){\r\n                courseCategory.saving = false;\r\n                toaster.pop('error','Course Category','Failed to Add');\r\n            });\r\n        };\r\n\r\n        $scope.createCourse  = function(course){\r\n            var parcel = {\r\n                'name': course.name,\r\n                'code': course.code,\r\n                'course_category_id': course.course_category.id\r\n            };\r\n\r\n            course.saving = true;\r\n\r\n            CoursesSettingsService.save(parcel,function(response){\r\n                toaster.pop('success', 'Course','Added Successfully');\r\n                course.saving = false;\r\n                $scope.courses = response.all;\r\n                $scope.$emit('refreshSchoolData');\r\n                course = {};\r\n            },function(response){\r\n                toaster.pop('error','Course','Failed to Add');\r\n                course.saving = false;\r\n            });\r\n        };\r\n\r\n        $scope.$on('refreshSchoolDataComplete',function(event){\r\n            $scope.school_categories = SchoolDataService.getCourseCategories();\r\n        });\r\n\r\n        function inArray(array,item){\r\n            var response = false;\r\n\r\n            if(angular.isArray(array) && array.length > 0) {\r\n                console.log('looping');\r\n                for (var i = 0; i < array.length; i++) {\r\n                    if (array[i] === item) {\r\n                        response = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            console.log('inarray');\r\n            console.log(response);\r\n\r\n            return response;\r\n        }\r\n    }\r\n]);\r\n\r\n/**\r\n * Academics Settings Controller\r\n */\r\n\r\napp.controller('SettingsAcademicsController',\r\n    [ '$scope', 'GradingSystemService', 'GradeAssessmentSystemService','SchoolDataService','toaster',\r\n        'BehaviourAssessmentSystemService','SkillAssessmentSystemService',\r\n    function ($scope, GradingSystemService, GradeAssessmentSystemService,SchoolDataService,toaster,BehaviourAssessmentSystemService,\r\n              SkillAssessmentSystemService) {\r\n\r\n        //Grading Systems\r\n\r\n        $scope.schoolCategories = SchoolDataService.school.school_type.school_categories;\r\n        $scope.assignedGradingSystem = GradingSystemService.getAssignedGradingSystem();\r\n        $scope.assignedGradeAssignmentSystem = GradeAssessmentSystemService.getAssignedGradeAssessmentSystem();\r\n        \r\n        $scope.gradingSystems = \r\n        {\r\n            loading: true,\r\n            data: [],\r\n            empty: false,\r\n            isAddingNewGradingSystem: false\r\n        };\r\n\r\n        GradingSystemService.query({},function(response){\r\n            $scope.gradingSystems.loading = false;\r\n            if(response.length > 0){\r\n                 $scope.gradingSystems.data = response;\r\n            }else{\r\n                $scope.gradingSystems.empty = true;\r\n            }\r\n        },function(error){\r\n            toaster.pop('error', \"Grading System\", \"Failed to Load Grading Systems, Try Again\");\r\n        });\r\n\r\n        $scope.setGradingSystemEditMode = function ($event, gradingSystem, isEdit) {\r\n            gradingSystem.edit = isEdit;\r\n            $scope.preventDefaultAction($event);\r\n        };\r\n\r\n        $scope.preventDefaultAction = function ($event) {\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n        };\r\n\r\n        $scope.addGrade = function (gradingSystem) {\r\n            if (angular.isDefined(gradingSystem) && angular.isDefined(gradingSystem.grades)) {\r\n                gradingSystem.grades.push({\r\n                    symbol: '',\r\n                    lowerRange: 0,\r\n                    upperRange: 0,\r\n                    remark: ''\r\n                });\r\n            }\r\n        };\r\n\r\n        $scope.removeGrade = function (gradingSystem, index) {\r\n            if (angular.isDefined(gradingSystem) && parseInt(index) >= 0) {\r\n                gradingSystem.grades.splice(index, 1);\r\n            }\r\n        };\r\n\r\n        $scope.addNewGradingSystem = function () {\r\n            $scope.gradingSystems.isAddingNewGradingSystem = true;\r\n            var clone = {\r\n                name: 'Default Grading System',\r\n                grades: [\r\n                    {\r\n                        symbol: 'A',\r\n                        lowerRange: 75,\r\n                        upperRange: 100,\r\n                        remark: 'Excellent'\r\n                    },\r\n                    {\r\n                        symbol: 'B',\r\n                        lowerRange: 60,\r\n                        upperRange: 74,\r\n                        remark: 'Very Good'\r\n                    },\r\n                    {\r\n                        symbol: 'C',\r\n                        lowerRange: 55,\r\n                        upperRange: 59,\r\n                        remark: 'Good'\r\n                    },\r\n                    {\r\n                        symbol: 'E',\r\n                        lowerRange: 50,\r\n                        upperRange: 54,\r\n                        remark: 'Pass'\r\n                    },\r\n                    {\r\n                        symbol: 'F',\r\n                        lowerRange: 0,\r\n                        upperRange: 49,\r\n                        remark: 'Fail'\r\n                    }\r\n                ]\r\n            };\r\n            clone.name += ' ' + $scope.gradingSystems.data.length;\r\n            //$scope.gradingSystems.push(clone);\r\n            GradingSystemService.save(clone, function (response) {\r\n                if (response.success) {\r\n                    $scope.gradingSystems.data = response.all;\r\n                    toaster.pop('success', \"New Grading System\", \"Added Successfully\");\r\n                    $scope.gradingSystems.isAddingNewGradingSystem = false;\r\n                    $scope.$emit('refreshSchoolData');\r\n                }\r\n            }, function (data) {\r\n                $scope.gradingSystems.isAddingNewGradingSystem = false;\r\n                toaster.pop('error', \"New Grading System\", \"Failed to Add, Try Again\");\r\n            });\r\n        };\r\n\r\n        $scope.deleteGradingSystem = function ($event, gradingSystems, index) {\r\n            var gradingSystem = gradingSystems[index];\r\n\r\n            GradingSystemService.delete(gradingSystem, function (data) {\r\n                console.log('delete success');\r\n                toaster.pop('success', \"Grading System\", \"Deleted Successfully\");\r\n                gradingSystems.splice(index, 1);\r\n                $scope.$emit('refreshSchoolData');\r\n            }, function () {\r\n                console.log('delete failure');\r\n                toaster.pop('error', \"Grading System\", \"Failed to Delete, Try Again\");\r\n            });\r\n            $scope.preventDefaultAction($event);\r\n        };\r\n\r\n        $scope.saveGradingSystemChanges = function (gradingSystem) {\r\n            GradingSystemService.update({id: gradingSystem.id}, gradingSystem).$promise.then(function (response) {\r\n                console.log('Saved Changes');\r\n                toaster.pop('success', \"Grading System\", \"Changes Saved Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n            }, function (data) {\r\n                console.log('could not save changes');\r\n                toaster.pop('error', \"Grading System\", \"Failed to save changes, Try Again\");\r\n            });\r\n        };\r\n\r\n        $scope.saveAssignedGradingSystem = function (assignedGradingSystem){\r\n            GradingSystemService.assignGradingSystem(assignedGradingSystem).$promise.then(function(){\r\n                toaster.pop('success', \"Assign Grading System\", \"Assignments Saved Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n            },function(){\r\n                toaster.pop('error', \"Assign Grading System\", \"Failed to save assignments\");\r\n            });\r\n        };\r\n        console.log(GradingSystemService.query());\r\n\r\n        //---------------------------------------------------------------------------------------\r\n        //---------------------------------------------------------------------------------------\r\n        //Grade Assessment Systems\r\n        //---------------------------------------------------------------------------------------\r\n        //---------------------------------------------------------------------------------------\r\n\r\n        $scope.gradeAssessmentSystems = \r\n        {\r\n            loading: true,\r\n            data: [],\r\n            empty: false,\r\n            isAddingNewGradeAssessmentSystem: false\r\n        };\r\n\r\n        GradeAssessmentSystemService.query({},function(response){\r\n            $scope.gradeAssessmentSystems.loading = false;\r\n            if(response.length > 0){\r\n                 $scope.gradeAssessmentSystems.data = response;\r\n            }else{\r\n                $scope.gradeAssessmentSystems.empty = true;\r\n            }\r\n        },function(error){\r\n            toaster.pop('error', \"Grading System\", \"Failed to Load Grading Systems, Try Again\");\r\n        });\r\n\r\n        $scope.setGradeAssessmentEditMode = function ($event, gradeAssessmentSystem, isEdit) {\r\n            gradeAssessmentSystem.edit = isEdit;\r\n            $scope.preventDefaultAction($event);\r\n        };\r\n\r\n        $scope.preventDefaultAction = function ($event) {\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n        };\r\n\r\n        $scope.addDivision = function (gradeAssessmentSystem) {\r\n            if (angular.isDefined(gradeAssessmentSystem) && angular.isDefined(gradeAssessmentSystem.divisions)) {\r\n                gradeAssessmentSystem.divisions.push({\r\n                    name: '',\r\n                    score: 0\r\n                });\r\n                gradeAssessmentSystem.total_divisions = gradeAssessmentSystem.divisions.length;\r\n            }\r\n        };\r\n\r\n        $scope.removeDivision = function (gradeAssessmentSystem, index) {\r\n            if (angular.isDefined(gradeAssessmentSystem) && parseInt(index) >= 0) {\r\n                gradeAssessmentSystem.divisions.splice(index, 1);\r\n                gradeAssessmentSystem.total_divisions = gradeAssessmentSystem.divisions.length;\r\n            }\r\n        };\r\n\r\n        $scope.addNewGradeAssessmentSystem = function () {\r\n            $scope.gradeAssessmentSystems.isAddingNewGradeAssessmentSystem = true;\r\n            var clone = {\r\n                name: 'Default Grade Assessment System',\r\n                total_score: 100,\r\n                divisions: [\r\n                    {\r\n                        name: 'First Test',\r\n                        score: 15\r\n                    },\r\n                    {\r\n                        name: 'Second Test',\r\n                        score: 15\r\n                    },\r\n                    {\r\n                        name: 'Assignment',\r\n                        score: 10\r\n                    },\r\n                    {\r\n                        name: 'Examination',\r\n                        score: 60\r\n                    }\r\n                ]\r\n            };\r\n            clone.name += ' ' + $scope.gradeAssessmentSystems.data.length;\r\n            //$scope.gradingSystems.push(clone);\r\n            GradeAssessmentSystemService.save(clone, function (response) {\r\n                $scope.gradeAssessmentSystems.isAddingNewGradeAssessmentSystem = false;\r\n                if (response.success) {\r\n                    $scope.gradeAssessmentSystems.data = response.all;\r\n                    $scope.$emit('refreshSchoolData');\r\n                }\r\n            }, function (data) {\r\n                $scope.gradeAssessmentSystems.isAddingNewGradeAssessmentSystem = false;\r\n                //$scope.gradingSystems.splice($scope.gradingSystems.length -1 ,1);\r\n            });\r\n        };\r\n\r\n        $scope.deleteGradeAssessmentSystem = function ($event, gradeAssessmentSystems, index) {\r\n            var gradeAssessmentSystem = gradeAssessmentSystems[index];\r\n\r\n            GradeAssessmentSystemService.delete(gradeAssessmentSystem, function (data) {\r\n                console.log('delete success');\r\n                gradeAssessmentSystems.splice(index, 1);\r\n                $scope.$emit('refreshSchoolData');\r\n            }, function () {\r\n                console.log('delete failure');\r\n            });\r\n            $scope.preventDefaultAction($event);\r\n        };\r\n\r\n        $scope.saveGradeAssessmentSystemChanges = function (gradeAssessmentSystem) {\r\n            var isValid =  validateGradeAssessmentSystem(gradeAssessmentSystem);\r\n            if(isValid){\r\n                gradeAssessmentSystem.errors = null;\r\n                GradeAssessmentSystemService.update({id: gradeAssessmentSystem.id}, gradeAssessmentSystem).$promise.then(function (response) {\r\n                    console.log('Saved Changes');\r\n                    toaster.pop('success', \"Grade Assessment System\", \"Changes Saved Succesfully\");\r\n                    $scope.$emit('refreshSchoolData');\r\n                }, function (data) {\r\n                    console.log('could not save changes');\r\n                    toaster.pop('error', \"Grade Assessment System\", \"Changes Failed\");\r\n                });\r\n            }else{\r\n                gradeAssessmentSystem.errors = {sum: true};\r\n                toaster.pop('error', \"Grade Assessment System\", \"Validation Failed\");\r\n            }\r\n        };\r\n\r\n        $scope.updateGradeDivisions = function (count, gradeAssessmentSystem) {\r\n            var num = parseInt(count);\r\n            if (num < 0 || angular.isUndefined(gradeAssessmentSystem) || angular.isUndefined(gradeAssessmentSystem.divisions))\r\n                return null;\r\n\r\n            if (num > gradeAssessmentSystem.divisions.length) {\r\n                var difference = num - gradeAssessmentSystem.divisions.length;\r\n                for (var i = 0; i < difference; i++) {\r\n                    $scope.addDivision(gradeAssessmentSystem);\r\n                }\r\n                return true;\r\n            }\r\n            if (num < gradeAssessmentSystem.divisions.length) {\r\n                var diff = gradeAssessmentSystem.divisions.length - num;\r\n                for (var j = 0; j <= diff; j++) {\r\n                    $scope.removeDivision(gradeAssessmentSystem, j);\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n\r\n        $scope.saveAssignedGradeAssessmentSystem = function (assignedGradeAssessmentSystem){\r\n\r\n            GradeAssessmentSystemService.assignGradeAssessmentSystem(assignedGradeAssessmentSystem).$promise.then(function(){\r\n                toaster.pop('success', \"Assign Grade Assessment System\", \"Assignments Saved Succesfully\");\r\n            },function(){\r\n                toaster.pop('error', \"Assign Grade Assessment System\", \"Failed to save assignments\");\r\n            });\r\n        };\r\n\r\n\r\n\r\n        //---------------------------------------------------------------------------------------\r\n        //---------------------------------------------------------------------------------------\r\n        //Behaviour and Skill System\r\n        //---------------------------------------------------------------------------------------\r\n        //---------------------------------------------------------------------------------------\r\n\r\n        $scope.behaviourCategories  = BehaviourAssessmentSystemService.query({'action': 'categories'});\r\n        $scope.behaviours  = BehaviourAssessmentSystemService.query();\r\n        $scope.skillCategories  = SkillAssessmentSystemService.query({'action': 'categories'});\r\n        $scope.skills  = SkillAssessmentSystemService.query();\r\n\r\n        $scope.addBehaviour = function(behaviour){\r\n            behaviour.adding =  true;\r\n            BehaviourAssessmentSystemService.save(behaviour,function(data){\r\n                $scope.behaviours  = data.all;\r\n                toaster.pop('success', \"Behaviour Assessment System\", \"New Behaviour Added Succesfully\");\r\n                behaviour.adding = false;\r\n                behaviour.name = '';\r\n                $scope.$emit('refreshSchoolData');\r\n            },function(){\r\n                behaviour.adding = false;\r\n                toaster.pop('error', \"behaviour Assessment System\", \"Failed to add behaviour\");\r\n            });\r\n        };\r\n\r\n        $scope.removeBehaviour = function(behaviour){\r\n            behaviour.removing =  true;\r\n            BehaviourAssessmentSystemService.delete(behaviour,function(data){\r\n                behaviour.removing =  false;\r\n                $scope.behaviours  = data.all;\r\n                toaster.pop('success', \"Behaviour Assessment System\", \"Behaviour removed Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n            },function(){\r\n                behaviour.removing =  false;\r\n                toaster.pop('error', \"behaviour Assessment System\", \"Failed to remove behaviour\");\r\n            });\r\n        };\r\n\r\n        $scope.updateBehaviour = function(behaviour){\r\n            BehaviourAssessmentSystemService.update({id: behaviour.id},behaviour).$promise.then(function(data){\r\n                $scope.behaviours  = data.all;\r\n                toaster.pop('success', \"Behaviour Assessment System\", \"New Behaviour Added Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n            },function(){\r\n                toaster.pop('error', \"behaviour Assessment System\", \"Failed to add behaviour\");\r\n            });\r\n        };\r\n\r\n        $scope.addSkill = function(skill){\r\n            skill.adding =  true;\r\n            SkillAssessmentSystemService.save(skill,function(data){\r\n                skill.adding =  false;\r\n                skill.name =  '';\r\n                $scope.skills  = data.all;\r\n                toaster.pop('success', \"Skill Assessment System\", \"Added Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n            },function(){\r\n                skill.adding =  false;\r\n                toaster.pop('error', \"Skill Assessment System\", \"Failed to Add\");\r\n            });\r\n        };\r\n\r\n        $scope.removeSkill = function(skill){\r\n            skill.removing =  true;\r\n            SkillAssessmentSystemService.delete(skill,function(data){\r\n                $scope.skills  = data.all;\r\n                skill.removing =  false;\r\n                toaster.pop('success', \"Skill Assessment System\", \"Removed Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n            },function(){\r\n                skill.removing =  false;\r\n                toaster.pop('error', \"Skill Assessment System\", \"Failed to remove\");\r\n            });\r\n        };\r\n\r\n        $scope.updateSkill = function(skill){\r\n            SkillAssessmentSystemService.update({id: skill.id},skill).$promise.then(function(data){\r\n                $scope.skills  = data.all;\r\n                toaster.pop('success', \"Skill Assessment System\", \"Updated Succesfully\");\r\n                $scope.$emit('refreshSchoolData');\r\n            },function(){\r\n                toaster.pop('error', \"Skill Assessment System\", \"Failed to update\");\r\n            });\r\n        };\r\n\r\n\r\n\r\n\r\n        function validateGradeAssessmentSystem(gradeAssessmentSystem){\r\n            var total_score = parseInt(gradeAssessmentSystem.total_score);\r\n            var sum =  0;\r\n\r\n            angular.forEach(gradeAssessmentSystem.divisions,function(grade,key){\r\n                sum += parseInt(grade.score);\r\n            });\r\n\r\n            return sum === total_score; \r\n        }\r\n    }\r\n]);\r\n\r\n/**\r\n * Report Settings Controller\r\n */\r\n\r\napp.controller('SettingsReportController', ['$scope', 'SchoolDataService',\r\n    function ($scope, SchoolDataService) {\r\n        $scope.sessions = getSessionsFrom(SchoolDataService);\r\n        $scope.sub_sessions = SchoolDataService.school.session_type.sub_sessions;\r\n        $scope.form = {\r\n            school_category: null\r\n        };\r\n\r\n\r\n        function getSessionsFrom(SchoolDataService) {\r\n            return SchoolDataService.school.sessions.sort(function (a, b) {\r\n                if (a.name < b.name) {\r\n                    return -1;\r\n                }\r\n                if (a.name > b.name) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n    }\r\n]);\r\n\r\n\r\napp.controller('SettingsFinancialController', ['$scope', 'SchoolDataService',\r\n    function ($scope, SchoolDataService) {\r\n        $scope.sessions = getSessionsFrom(SchoolDataService);\r\n        $scope.sub_sessions = SchoolDataService.school.session_type.sub_sessions;\r\n        $scope.form = {\r\n            school_category: null\r\n        };\r\n\r\n\r\n        function getSessionsFrom(SchoolDataService) {\r\n            return SchoolDataService.school.sessions.sort(function (a, b) {\r\n                if (a.name < b.name) {\r\n                    return -1;\r\n                }\r\n                if (a.name > b.name) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n    }\r\n]);\r\n\r\n\r\n/**\r\n * Notification Settings Controller\r\n */\r\napp.controller('SettingsNotificationController', ['$scope', 'SchoolDataService',\r\n    function ($scope, SchoolDataService) {\r\n        $scope.sessions = getSessionsFrom(SchoolDataService);\r\n        $scope.sub_sessions = SchoolDataService.school.session_type.sub_sessions;\r\n        $scope.form = {\r\n            school_category: null\r\n        };\r\n\r\n\r\n        function getSessionsFrom(SchoolDataService) {\r\n            return SchoolDataService.school.sessions.sort(function (a, b) {\r\n                if (a.name < b.name) {\r\n                    return -1;\r\n                }\r\n                if (a.name > b.name) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n    }\r\n]);\r\n\r\n\r\napp.controller('SettingsAdministratorsController', ['$scope', 'SchoolDataService',\r\n    function ($scope, SchoolDataService) {\r\n        $scope.sessions = getSessionsFrom(SchoolDataService);\r\n        $scope.sub_sessions = SchoolDataService.school.session_type.sub_sessions;\r\n        $scope.form = {\r\n            school_category: null\r\n        };\r\n\r\n\r\n        function getSessionsFrom(SchoolDataService) {\r\n            return SchoolDataService.school.sessions.sort(function (a, b) {\r\n                if (a.name < b.name) {\r\n                    return -1;\r\n                }\r\n                if (a.name > b.name) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n    }\r\n]);\r\n","/**=========================================================\r\n * Module: filestyle.js\r\n * Initializes the fielstyle plugin\r\n =========================================================*/\r\n\r\nApp.directive('filestyle', function() {\r\n  return {\r\n    restrict: 'A',\r\n    controller: function($scope, $element) {\r\n      var options = $element.data();\r\n      \r\n      // old usage support\r\n        options.classInput = $element.data('classinput') || options.classInput;\r\n      \r\n      $element.filestyle(options);\r\n    }\r\n  };\r\n});\r\n","/**=========================================================\r\n * Module: form-wizard.js\r\n * Handles form wizard plugin and validation\r\n =========================================================*/\r\n\r\nApp.directive('formWizard', function($parse){\r\n  'use strict';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    link: function(scope, element, attribute) {\r\n      var validate = $parse(attribute.validateSteps)(scope),\r\n          wiz = new Wizard(attribute.steps, !!validate, element);\r\n      scope.wizard = wiz.init();\r\n\r\n    }\r\n  };\r\n\r\n  function Wizard (quantity, validate, element) {\r\n    \r\n    var self = this;\r\n    self.quantity = parseInt(quantity,10);\r\n    self.validate = validate;\r\n    self.element = element;\r\n    \r\n    self.init = function() {\r\n      self.createsteps(self.quantity);\r\n      self.go(1); // always start at fist step\r\n      return self;\r\n    };\r\n\r\n    self.go = function(step) {\r\n      \r\n      if ( angular.isDefined(self.steps[step]) ) {\r\n\r\n        if(self.validate && step !== 1) {\r\n          var form = $(self.element),\r\n              group = form.children().children('div').get(step - 2);\r\n\r\n          if (false === form.parsley().validate( group.id )) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        self.cleanall();\r\n        self.steps[step] = true;\r\n      }\r\n    };\r\n\r\n    self.active = function(step) {\r\n      return !!self.steps[step];\r\n    };\r\n\r\n    self.cleanall = function() {\r\n      for(var i in self.steps){\r\n        self.steps[i] = false;\r\n      }\r\n    };\r\n\r\n    self.createsteps = function(q) {\r\n      self.steps = [];\r\n      for(var i = 1; i <= q; i++) self.steps[i] = false;\r\n    };\r\n\r\n  }\r\n\r\n});\r\n","App.directive('image', function($q) {\r\n        'use strict'\r\n\r\n        var URL = window.URL || window.webkitURL;\r\n\r\n        var getResizeArea = function () {\r\n            var resizeAreaId = 'fileupload-resize-area';\r\n\r\n            var resizeArea = document.getElementById(resizeAreaId);\r\n\r\n            if (!resizeArea) {\r\n                resizeArea = document.createElement('canvas');\r\n                resizeArea.id = resizeAreaId;\r\n                resizeArea.style.visibility = 'hidden';\r\n                document.body.appendChild(resizeArea);\r\n            }\r\n\r\n            return resizeArea;\r\n        }\r\n\r\n        var resizeImage = function (origImage, options) {\r\n            var maxHeight = options.resizeMaxHeight || 300;\r\n            var maxWidth = options.resizeMaxWidth || 250;\r\n            var quality = options.resizeQuality || 0.7;\r\n            var type = options.resizeType || 'image/jpg';\r\n\r\n            var canvas = getResizeArea();\r\n\r\n            var height = origImage.height;\r\n            var width = origImage.width;\r\n\r\n            // calculate the width and height, constraining the proportions\r\n            if (width > height) {\r\n                if (width > maxWidth) {\r\n                    height = Math.round(height *= maxWidth / width);\r\n                    width = maxWidth;\r\n                }\r\n            } else {\r\n                if (height > maxHeight) {\r\n                    width = Math.round(width *= maxHeight / height);\r\n                    height = maxHeight;\r\n                }\r\n            }\r\n\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n\r\n            //draw image on canvas\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.drawImage(origImage, 0, 0, width, height);\r\n\r\n            // get the data from canvas as 70% jpg (or specified type).\r\n            return canvas.toDataURL(type, quality);\r\n        };\r\n\r\n        var createImage = function(url, callback) {\r\n            var image = new Image();\r\n            image.onload = function() {\r\n                callback(image);\r\n            };\r\n            image.src = url;\r\n        };\r\n\r\n        var fileToDataURL = function (file) {\r\n            var deferred = $q.defer();\r\n            var reader = new FileReader();\r\n            reader.onload = function (e) {\r\n                deferred.resolve(e.target.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n            return deferred.promise;\r\n        };\r\n\r\n\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                image: '=',\r\n                resizeMaxHeight: '@?',\r\n                resizeMaxWidth: '@?',\r\n                resizeQuality: '@?',\r\n                resizeType: '@?',\r\n            },\r\n            link: function postLink(scope, element, attrs, ctrl) {\r\n\r\n                var doResizing = function(imageResult, callback) {\r\n                    createImage(imageResult.url, function(image) {\r\n                        var dataURL = resizeImage(image, scope);\r\n                        imageResult.resized = {\r\n                            dataURL: dataURL,\r\n                            type: dataURL.match(/:(.+\\/.+);/)[1],\r\n                        };\r\n                        callback(imageResult);\r\n                    });\r\n                };\r\n\r\n                var applyScope = function(imageResult) {\r\n                    scope.$apply(function() {\r\n                        //console.log(imageResult);\r\n                        if(attrs.multiple)\r\n                            scope.image.push(imageResult);\r\n                        else\r\n                            scope.image = imageResult;\r\n                    });\r\n                };\r\n\r\n\r\n                element.bind('change', function (evt) {\r\n                    //when multiple always return an array of images\r\n                    if(attrs.multiple)\r\n                        scope.image = [];\r\n\r\n                    var files = evt.target.files;\r\n                    for(var i = 0; i < files.length; i++) {\r\n                        //create a result object for each file in files\r\n                        var imageResult = {\r\n                            file: files[i],\r\n                            url: URL.createObjectURL(files[i])\r\n                        };\r\n\r\n                        fileToDataURL(files[i]).then(function (dataURL) {\r\n                            imageResult.dataURL = dataURL;\r\n                        });\r\n\r\n                        if(scope.resizeMaxHeight || scope.resizeMaxWidth) { //resize image\r\n                            doResizing(imageResult, function(imageResult) {\r\n                                applyScope(imageResult);\r\n                            });\r\n                        }\r\n                        else { //no resizing\r\n                            applyScope(imageResult);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    });","/**=========================================================\n * Module: masked,js\n * Initializes the masked inputs\n =========================================================*/\n\nApp.directive('masked', function() {\n  return {\n    restrict: 'A',\n    controller: function($scope, $element) {\n      var $elem = $($element);\n      if($.fn.inputmask)\n        $elem.inputmask();\n    }\n  };\n});\n","/**\r\n * Created by Ak on 4/4/2015.\r\n */\r\n/**=========================================================\r\n * Module: scroll.js\r\n * Make a content box scrollable\r\n =========================================================*/\r\n\r\nApp.directive('scrollable', function(){\r\n    return {\r\n        restrict: 'EA',\r\n        link: function(scope, elem, attrs) {\r\n            var defaultHeight = 250;\r\n            elem.slimScroll({\r\n                height: (attrs.height || defaultHeight)\r\n            });\r\n        }\r\n    };\r\n});","/**=========================================================\n * Module panel-tools.js\n * Directive tools to control panels. \n * Allows collapse, refresh and dismiss (remove)\n * Saves panel state in browser storage\n =========================================================*/\nApp.directive('paneltool', function($compile, $timeout){\n  var templates = {\n    /* jshint multistr: true */\n    collapse:\"<a href='#' panel-collapse='' tooltip='Collapse Panel' ng-click='{{panelId}} = !{{panelId}}'> \\\n                <em ng-show='{{panelId}}' class='fa fa-plus'></em> \\\n                <em ng-show='!{{panelId}}' class='fa fa-minus'></em> \\\n              </a>\",\n    dismiss: \"<a href='#' panel-dismiss='' tooltip='Close Panel'>\\\n               <em class='fa fa-times'></em>\\\n             </a>\",\n    refresh: \"<a href='#' panel-refresh='' data-spinner='{{spinner}}' tooltip='Refresh Panel'>\\\n               <em class='fa fa-refresh'></em>\\\n             </a>\"\n  };\n\n  function getTemplate( elem, attrs ){\n    var temp = '';\n    attrs = attrs || {};\n    if(attrs.toolCollapse)\n      temp += templates.collapse.replace(/{{panelId}}/g, (elem.parent().parent().attr('id')) );\n    if(attrs.toolDismiss)\n      temp += templates.dismiss;\n    if(attrs.toolRefresh)\n      temp += templates.refresh.replace(/{{spinner}}/g, attrs.toolRefresh);\n    return temp;\n  }\n  \n  return {\n    restrict: 'E',\n    scope: false,\n    link: function (scope, element, attrs) {\n\n      var tools = scope.panelTools || attrs;\n  \n      $timeout(function() {\n        element.html(getTemplate(element, tools )).show();\n        $compile(element.contents())(scope);\n        \n        element.addClass('pull-right');\n      });\n\n    }\n  };\n})\n/**=========================================================\n * Dismiss panels * [panel-dismiss]\n =========================================================*/\n.directive('panelDismiss', function($q, Utils){\n  'use strict';\n  return {\n    restrict: 'A',\n    controller: function ($scope, $element) {\n      var removeEvent   = 'panel-remove',\n          removedEvent  = 'panel-removed';\n\n      $element.on('click', function () {\n\n        // find the first parent panel\n        var parent = $(this).closest('.panel');\n\n        removeElement();\n\n        function removeElement() {\n          var deferred = $q.defer();\n          var promise = deferred.promise;\n          \n          // Communicate event destroying panel\n          $scope.$emit(removeEvent, parent.attr('id'), deferred);\n          promise.then(destroyMiddleware);\n        }\n\n        // Run the animation before destroy the panel\n        function destroyMiddleware() {\n          if(Utils.support.animation) {\n            parent.animo({animation: 'bounceOut'}, destroyPanel);\n          }\n          else destroyPanel();\n        }\n\n        function destroyPanel() {\n\n          var col = parent.parent();\n          parent.remove();\n          // remove the parent if it is a row and is empty and not a sortable (portlet)\n          col\n            .filter(function() {\n            var el = $(this);\n            return (el.is('[class*=\"col-\"]:not(.sortable)') && el.children('*').length === 0);\n          }).remove();\n\n          // Communicate event destroyed panel\n          $scope.$emit(removedEvent, parent.attr('id'));\n\n        }\n      });\n    }\n  };\n})\n/**=========================================================\n * Collapse panels * [panel-collapse]\n =========================================================*/\n.directive('panelCollapse', ['$timeout', function($timeout){\n  'use strict';\n  \n  var storageKeyName = 'panelState',\n      storage;\n  \n  return {\n    restrict: 'A',\n    scope: false,\n    controller: function ($scope, $element) {\n\n      // Prepare the panel to be collapsible\n      var $elem   = $($element),\n          parent  = $elem.closest('.panel'), // find the first parent panel\n          panelId = parent.attr('id');\n\n      storage = $scope.$storage;\n\n      // Load the saved state if exists\n      var currentState = loadPanelState( panelId );\n      if ( typeof currentState !== 'undefined') {\n        $timeout(function(){\n            $scope[panelId] = currentState; },\n          10);\n      }\n\n      // bind events to switch icons\n      $element.bind('click', function() {\n\n        savePanelState( panelId, !$scope[panelId] );\n\n      });\n    }\n  };\n\n  function savePanelState(id, state) {\n    if(!id) return false;\n    var data = angular.fromJson(storage[storageKeyName]);\n    if(!data) { data = {}; }\n    data[id] = state;\n    storage[storageKeyName] = angular.toJson(data);\n  }\n\n  function loadPanelState(id) {\n    if(!id) return false;\n    var data = angular.fromJson(storage[storageKeyName]);\n    if(data) {\n      return data[id];\n    }\n  }\n\n}])\n/**=========================================================\n * Refresh panels\n * [panel-refresh] * [data-spinner=\"standard\"]\n =========================================================*/\n.directive('panelRefresh', function($q){\n  'use strict';\n  \n  return {\n    restrict: 'A',\n    scope: false,\n    controller: function ($scope, $element) {\n      \n      var refreshEvent   = 'panel-refresh',\n          whirlClass     = 'whirl',\n          defaultSpinner = 'standard';\n\n\n      // catch clicks to toggle panel refresh\n      $element.on('click', function () {\n        var $this   = $(this),\n            panel   = $this.parents('.panel').eq(0),\n            spinner = $this.data('spinner') || defaultSpinner\n            ;\n\n        // start showing the spinner\n        panel.addClass(whirlClass + ' ' + spinner);\n\n        // Emit event when refresh clicked\n        $scope.$emit(refreshEvent, panel.attr('id'));\n\n      });\n\n      // listen to remove spinner\n      $scope.$on('removeSpinner', removeSpinner);\n\n      // method to clear the spinner when done\n      function removeSpinner (ev, id) {\n        if (!id) return;\n        var newid = id.charAt(0) == '#' ? id : ('#'+id);\n        angular\n          .element(newid)\n          .removeClass(whirlClass);\n      }\n    }\n  };\n});\n","/**=========================================================\n * Module: tags-input.js\n * Initializes the tag inputs plugin\n =========================================================*/\n\nApp.directive('tagsinput', function($timeout) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n\n      element.on('itemAdded itemRemoved', function(){\n        // check if view value is not empty and is a string\n        // and update the view from string to an array of tags\n        if(ngModel.$viewValue && ngModel.$viewValue.split) {\n          ngModel.$setViewValue( ngModel.$viewValue.split(',') );\n          ngModel.$render();\n        }\n      });\n\n      $timeout(function(){\n        element.tagsinput();\n      });\n\n    }\n  };\n});\n","/**=========================================================\n * Module: validate-form.js\n * Initializes the validation plugin Parsley\n =========================================================*/\n\nApp.directive('validateForm', function() {\n  return {\n    restrict: 'A',\n    controller: function($scope, $element) {\n      var $elem = $($element);\n      if($.fn.parsley)\n        $elem.parsley();\n    }\n  };\n});\n"],"sourceRoot":"/source/"}