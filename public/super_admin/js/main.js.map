{
  "version": 3,
  "sources": [
    "app.js",
    "controllers.js",
    "directives.js",
    "filters.js",
    "services.js"
  ],
  "names": [],
  "mappingszj
  "file": "main.js",
  "sourcesContent": [
    "/**\r\n * Created by Ak on 2/19/2015.\r\n */\r\nvar app = angular.module(\"SuperAdminApp\",\r\n    ['ui.select', 'ngSanitize', 'ngImgCrop',\r\n        'ui.bootstrap', 'ui.router', 'ngUpload',\r\n        'ngAnimate', 'ngResource',\r\n        'angular-loading-bar', 'SuperAdminApp.directives', 'SuperAdminApp.controllers',\r\n        'SuperAdminApp.services', 'ngCookies']);\r\n\r\napp.config(['$urlRouterProvider', '$stateProvider',\r\n    function ($urlRouterProvider, $stateProvider) {\r\n        $stateProvider.state('devices',\r\n            {\r\n                url: '/devices',\r\n                abstract: true,\r\n                templateUrl: 'partials/device_models/dashboard.html',\r\n                controller: function () {\r\n                },\r\n                resolve: {\r\n                    'active': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.active_nav = 'devices';\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('devices.search',\r\n            {\r\n                url: '/search?q',\r\n                templateUrl: 'partials/device_models/search.html',\r\n                controller: ['$scope', 'result', '$stateParams', function ($scope, result, $stateParams) {\r\n                    console.log(result);\r\n                    $scope.result = result;\r\n                    $scope.search = $stateParams.q;\r\n                }],\r\n                resolve: {\r\n                    'result': ['$stateParams', 'DevicesServ', function ($stateParams, DevicesServ) {\r\n                        return DevicesServ.query({q: $stateParams.q});\r\n                    }],\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('devices.menu',\r\n            {\r\n                url: '/menu',\r\n                templateUrl: 'partials/device_models/menu.html',\r\n                controller: function () {\r\n                },\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = false;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('devices.add',\r\n            {\r\n                url: '/add',\r\n                templateUrl: 'partials/device_models/add.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }],\r\n                    'DeviceBrands': ['DeviceBrandsServ', function (DeviceBrandsServ) {\r\n                        return DeviceBrandsServ.query({only: true});\r\n                    }]\r\n                },\r\n                controller: ['$scope', 'ImageFetcher', 'DeviceBrands', function ($scope, ImageFetcher, DeviceBrands) {\r\n\r\n                    $scope.models = DeviceBrands;\r\n\r\n                    $scope.sizes = [];\r\n                    $scope.sizes_string = '';\r\n                    $scope.baseLinePrice = {};\r\n                    $scope.baseLinePriceString = '';\r\n                    $scope.images = [];\r\n\r\n                    $scope.fetchImages = function (name) {\r\n                        var promise = ImageFetcher.fetch(name);\r\n                        promise.then(function (images) {\r\n                            $scope.images = images;\r\n                        });\r\n                    };\r\n\r\n                    function createStringVersion() {\r\n                        $scope.sizes_string = $scope.sizes.join();\r\n                    }\r\n\r\n                    $scope.addToSizes = function (device_size) {\r\n                        $scope.sizes.push(device_size);\r\n                        $scope.device_size = null;\r\n                        createStringVersion();\r\n                    };\r\n\r\n                    $scope.removeSize = function (index) {\r\n                        $scope.sizes.splice(index, 1);\r\n                        createStringVersion();\r\n                    };\r\n\r\n                    $scope.updateBaseLineString = function () {\r\n                        var temp = [];\r\n                        angular.forEach($scope.baseLinePrice, function (value, key) {\r\n                            temp.push(\"\" + key + \": \" + value);\r\n                        });\r\n                        $scope.baseLinePriceString = temp.join();\r\n                    }\r\n\r\n\r\n                    //\r\n\r\n                    $scope.myImage = '';\r\n                    $scope.myCroppedImage = '';\r\n\r\n                    var handleFileSelect = function (evt) {\r\n                        var file = evt.currentTarget.files[0];\r\n                        var reader = new FileReader();\r\n                        reader.onload = function (evt) {\r\n                            $scope.$apply(function ($scope) {\r\n                                $scope.myImage = evt.target.result;\r\n                            });\r\n                        };\r\n                        reader.readAsDataURL(file);\r\n                    };\r\n                    angular.element(document.querySelector('#fileInput')).on('change', handleFileSelect);\r\n\r\n                }]\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('devices.list',\r\n            {\r\n                url: '/list',\r\n                templateUrl: 'partials/device_models/list.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }],\r\n                    'Devices': ['DevicesServ', function (DevicesServ) {\r\n                        return DevicesServ.query({});\r\n                    }]\r\n                },\r\n                controller: ['$scope', 'DevicesServ', 'Devices', function ($scope, DevicesServ, Devices) {\r\n                    $scope.models = Devices;\r\n                    $scope.deleteItem = function (id) {\r\n                        DevicesServ.delete({id: id}, function (response) {\r\n                            location.reload();\r\n                        }, function (response) {\r\n                            alert(response);\r\n                        });\r\n                    }\r\n                }]\r\n            }\r\n        );\r\n\r\n\r\n        $stateProvider.state('device_brands',\r\n            {\r\n                url: '/device_brands',\r\n                abstract: true,\r\n                templateUrl: 'partials/device_brands/dashboard.html',\r\n                controller: function () {\r\n\r\n                }\r\n                ,\r\n                resolve: {\r\n                    'active': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.active_nav = 'device_brands';\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('device_brands.search',\r\n            {\r\n                url: '/search?q',\r\n                templateUrl: 'partials/device_brands/search.html',\r\n                controller: ['$scope', 'result', '$stateParams', function ($scope, result, $stateParams) {\r\n                    console.log(result);\r\n                    $scope.result = result;\r\n                    $scope.search = $stateParams.q;\r\n                }],\r\n                resolve: {\r\n                    'result': ['$stateParams', 'DeviceBrandsServ', function ($stateParams, DeviceBrandsServ) {\r\n                        return DeviceBrandsServ.query({q: $stateParams.q});\r\n                    }],\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('device_brands.menu',\r\n            {\r\n                url: '/menu',\r\n                templateUrl: 'partials/device_brands/menu.html',\r\n                controller: function () {\r\n                },\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = false;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('device_brands.add',\r\n            {\r\n                url: '/add',\r\n                templateUrl: 'partials/device_brands/add.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                },\r\n                controller: ['$scope', 'ImageFetcher', function ($scope, ImageFetcher) {\r\n\r\n                    $scope.fetchImages = function (name) {\r\n                        var promise = ImageFetcher.fetch(name);\r\n                        promise.then(function (images) {\r\n                            $scope.images = images;\r\n                        });\r\n                    };\r\n                }]\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('device_brands.list',\r\n            {\r\n                url: '/list',\r\n                templateUrl: 'partials/device_brands/list.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }],\r\n                    'DeviceBrands': ['DeviceBrandsServ', function (DeviceBrandsServ) {\r\n                        return DeviceBrandsServ.query({only: true});\r\n                    }]\r\n                },\r\n                controller: ['$scope', 'DeviceBrandsServ', 'DeviceBrands', function ($scope, DeviceBrandsServ, DeviceBrands) {\r\n                    $scope.brands = DeviceBrands;\r\n                    $scope.deleteItem = function (id) {\r\n                        DeviceBrandsServ.delete({id: id}, function (response) {\r\n                            location.reload();\r\n                        }, function (response) {\r\n                            alert(response);\r\n                        });\r\n                    }\r\n                }]\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('networks',\r\n            {\r\n                url: '/networks',\r\n                abstract: true,\r\n                templateUrl: 'partials/networks/dashboard.html',\r\n                controller: function () {\r\n                    //$state.go('networks.menu');\r\n                },\r\n                resolve: {\r\n                    'active': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.active_nav = 'networks';\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('networks.search',\r\n            {\r\n                url: '/search?q',\r\n                templateUrl: 'partials/networks/search.html',\r\n                controller: ['$scope', 'result', '$stateParams', function ($scope, result, $stateParams) {\r\n                    console.log(result);\r\n                    $scope.result = result;\r\n                    $scope.search = $stateParams.q;\r\n                }],\r\n                resolve: {\r\n                    'result': ['$stateParams', 'NetworksServ', function ($stateParams, NetworksServ) {\r\n                        return NetworksServ.query({q: $stateParams.q});\r\n                    }],\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('networks.menu',\r\n            {\r\n                url: '/menu',\r\n                templateUrl: 'partials/networks/menu.html',\r\n                controller: function () {\r\n                },\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = false;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('networks.add',\r\n            {\r\n                url: '/add',\r\n                templateUrl: 'partials/networks/add.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                },\r\n                controller: ['$scope', 'ImageFetcher', function ($scope, ImageFetcher) {\r\n\r\n                    $scope.fetchImages = function (name) {\r\n                        var promise = ImageFetcher.fetch(name);\r\n                        promise.then(function (images) {\r\n                            $scope.images = images;\r\n                        });\r\n                    };\r\n                }]\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('networks.list',\r\n            {\r\n                url: '/list',\r\n                templateUrl: 'partials/networks/list.html',\r\n                resolve: {\r\n                    'Networks': ['NetworksServ', function (NetworksServ) {\r\n                        return NetworksServ.query({});\r\n                    }],\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                },\r\n                controller: ['$scope', 'Networks', 'NetworksServ', function ($scope, Networks, NetworksServ) {\r\n                    $scope.networks = Networks;\r\n                    $scope.deleteItem = function (id) {\r\n                        NetworksServ.delete({id: id}, function (response) {\r\n                            location.reload();\r\n                        }, function (response) {\r\n                            alert(response);\r\n                        });\r\n                    }\r\n                }]\r\n            }\r\n        );\r\n\r\n\r\n        $stateProvider.state('advisers',\r\n            {\r\n                url: '/advisers',\r\n                abstract: true,\r\n                templateUrl: 'partials/advisers/dashboard.html',\r\n                controller: function () {\r\n                },\r\n                resolve: {\r\n                    'active': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.active_nav = 'advisers';\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('advisers.menu',\r\n            {\r\n                url: '/menu',\r\n                templateUrl: 'partials/advisers/menu.html',\r\n                controller: ['$scope', 'advisers', function ($scope, advisers) {\r\n                    $scope.advisers = advisers;\r\n                }],\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = false;\r\n                    }],\r\n                    'advisers': ['AdvisersServ', function (AdvisersServ) {\r\n                        return AdvisersServ.query({limit: 6});\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('advisers.list',\r\n            {\r\n                url: '/list',\r\n                templateUrl: 'partials/advisers/list.html',\r\n                controller: ['$scope', 'advisers', 'AdvisersServ', function ($scope, advisers, AdvisersServ) {\r\n                    $scope.advisers = advisers;\r\n\r\n                    $scope.deleteItem = function (id) {\r\n                        AdvisersServ.delete({id: id}, function (response) {\r\n                            location.reload();\r\n                        }, function (response) {\r\n                            alert(response);\r\n                        });\r\n                    }\r\n                }],\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }],\r\n                    'advisers': ['AdvisersServ', function (AdvisersServ) {\r\n                        return AdvisersServ.query();\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('advisers.add',\r\n            {\r\n                url: '/add',\r\n                templateUrl: 'partials/advisers/add/add.html',\r\n                controller: ['$scope', 'AdvisersServ', '$state', function ($scope, AdvisersServ, $state) {\r\n                    $scope.createAdviser = function (adviser) {\r\n                        AdvisersServ.save(adviser, function (adviser) {\r\n                            console.log(adviser);\r\n                            $state.go('advisers.list');\r\n                        }, function (error) {\r\n                            alert(\"Ensure values are all filled correctly\");\r\n                        });\r\n                    }\r\n                }],\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n\r\n        $stateProvider.state('ticket',\r\n            {\r\n                url: '/ticket',\r\n                abstract: true,\r\n                templateUrl: 'partials/ticket/dashboard.html',\r\n                controller: function () {\r\n                },\r\n                resolve: {\r\n                    'active': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.active_nav = 'ticket';\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.menu',\r\n            {\r\n                url: '/menu',\r\n                templateUrl: 'partials/ticket/menu.html',\r\n                controller: ['$scope', 'Tickets', 'ShowSettings', function ($scope, Tickets, ShowSettings) {\r\n                    $scope.showSettings = ShowSettings;\r\n                    $scope.tickets = Tickets;\r\n                }],\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = false;\r\n                    }],\r\n                    'Tickets': ['TicketServ', function (TicketServ) {\r\n                        return TicketServ.query({limit: 6});\r\n                    }],\r\n                    'ShowSettings': ['CurrentUser', function (CurrentUser) {\r\n                        return CurrentUser.get().role != 'adviser';\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.list',\r\n            {\r\n                url: '/list',\r\n                templateUrl: 'partials/ticket/list.html',\r\n                controller: ['$scope', 'Tickets', 'TicketServ', function ($scope, Tickets, TicketServ) {\r\n                    $scope.tickets = Tickets;\r\n\r\n                    $scope.deleteItem = function (id) {\r\n                        TicketServ.delete({id: id}, function (response) {\r\n                            location.reload();\r\n                        }, function (response) {\r\n                            alert(response);\r\n                        });\r\n                    }\r\n                }],\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }],\r\n                    'Tickets': ['TicketServ', function (TicketServ) {\r\n                        return TicketServ.query();\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.import',\r\n            {\r\n                url: '/import',\r\n                templateUrl: 'partials/ticket/import.html',\r\n                controller: ['$scope', 'Tickets', 'TicketServ', function ($scope, Tickets, TicketServ) {\r\n                    $scope.tickets = Tickets;\r\n                    $scope.upload = {\r\n                        working: false,\r\n                        response: {},\r\n                        complete: false\r\n                    };\r\n\r\n                    $scope.uploadedExcelDocument = function (content, isComplete) {\r\n                        console.log(content);\r\n                        $scope.upload.working = true;\r\n                        if (isComplete) {\r\n                            console.log('is complete');\r\n                            $scope.upload.working = false;\r\n                            $scope.upload.complete = true;\r\n                            $scope.upload.response = JSON.parse(content);\r\n                        } else {\r\n                            $scope.upload.working = true;\r\n                            $scope.upload.complete = false;\r\n                            console.log('is incomplete');\r\n                        }\r\n                    };\r\n\r\n                    $scope.deleteItem = function (id) {\r\n                        TicketServ.delete({id: id}, function (response) {\r\n                            location.reload();\r\n                        }, function (response) {\r\n                            alert(response);\r\n                        });\r\n                    }\r\n                }],\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }],\r\n                    'Tickets': ['TicketServ', function (TicketServ) {\r\n                        return TicketServ.query();\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.config',\r\n            {\r\n                url: '/config',\r\n                templateUrl: 'partials/ticket/config.html',\r\n                controller: ['$scope', 'TicketConfigServ', 'GradingSystem', 'GradingSystemServ', 'ToastService',\r\n                    function ($scope, TicketConfigServ, GradingSystem, GradingSystemServ, ToastService) {\r\n                        $scope.columns = [];\r\n                        $scope.gradingSystem = GradingSystem;\r\n\r\n                        TicketConfigServ.query({}, function (result) {\r\n                            $scope.columns = result;\r\n                        });\r\n\r\n                        $scope.deleteItem = function (column) {\r\n                            TicketConfigServ.delete({id: 0, column_title: column}, function (response) {\r\n                                location.reload();\r\n                            }, function (response) {\r\n                                alert(response);\r\n                            });\r\n                        };\r\n\r\n                        $scope.createColumn = function (title) {\r\n                            TicketConfigServ.save({column_title: title}, function (response) {\r\n                                location.reload();\r\n                            }, function (response) {\r\n                                alert(response);\r\n                            });\r\n                        };\r\n\r\n                        $scope.updateGrade = function (grade) {\r\n                            grade.status = 'loading';\r\n                            //grade.status = 'failure';\r\n                            var res = GradingSystemServ.update({id: grade.id}, grade).$promise;\r\n                            res.then(function () {\r\n                                grade.status = 'success';\r\n                                ToastService.success(grade.presentation + \" updated\");\r\n                            }, function () {\r\n                                grade.status = 'failure';\r\n                                ToastService.error(grade.presentation + \" update failed\");\r\n                            });\r\n                        };\r\n\r\n                    }],\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }],\r\n                    'GradingSystem': ['GradingSystemServ', function (GradingSystemServ) {\r\n                        return GradingSystemServ.get({});\r\n                    }]\r\n\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.add',\r\n            {\r\n                url: '/add',\r\n                templateUrl: 'partials/ticket/add/base.html',\r\n                controller: 'NewTicketController',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }],\r\n                    'TicketColumns': ['TicketConfigServ', function (TicketConfigServ) {\r\n                        return TicketConfigServ.query({});\r\n                    }],\r\n                    'Networks': ['NetworksServ', function (NetworksServ) {\r\n                        return NetworksServ.query({});\r\n                    }],\r\n                    'Airtel': ['GadgetEvaluationReward', function (GadgetEvaluationReward) {\r\n                        return GadgetEvaluationReward.fetchAirtelBonus();\r\n                    }],\r\n                    'DeviceBrands': ['DeviceBrandsServ', function (DeviceBrandsServ) {\r\n                        return DeviceBrandsServ.query({});\r\n                    }],\r\n                    'GradingSystem': ['GradingSystemServ', function (GradingSystemServ) {\r\n                        return GradingSystemServ.get({});\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.add.stepOne',\r\n            {\r\n                url: '/step-one',\r\n                templateUrl: 'partials/ticket/add/step-one.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.add.stepTwo',\r\n            {\r\n                url: '/step-two',\r\n                templateUrl: 'partials/ticket/add/step-two.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.add.stepThree',\r\n            {\r\n                url: '/step-three',\r\n                templateUrl: 'partials/ticket/add/step-three.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.add.stepFour',\r\n            {\r\n                url: '/step-three',\r\n                templateUrl: 'partials/ticket/add/step-four.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.add.final',\r\n            {\r\n                url: '/final',\r\n                templateUrl: 'partials/ticket/add/final.html',\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.show',\r\n            {\r\n                url: '/show/{id}',\r\n                templateUrl: 'partials/ticket/show.html',\r\n                controller: ['$scope', '$stateParams', 'TicketServ', '$state', 'Ticket',\r\n                    function ($scope, $stateParams, TicketServ, $state, Ticket) {\r\n                        $scope.ticket = Ticket;\r\n\r\n                        $scope.deleteItem = function (id) {\r\n                            TicketServ.delete({id: id}, function (response) {\r\n                                $state.go('ticket.list');\r\n                            }, function (response) {\r\n                                alert(response);\r\n                            });\r\n                        }\r\n                    }],\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }],\r\n                    'Ticket': ['TicketServ', '$stateParams', function (TicketServ, $stateParams) {\r\n                        return TicketServ.get({id: $stateParams.id});\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n\r\n        $stateProvider.state('ticket.accept-terms',\r\n            {\r\n                url: '/accept-terms/{id}',\r\n                templateUrl: 'partials/ticket/evaluation/terms.html',\r\n                controller: ['$scope', '$stateParams', '$state', 'TicketServ', 'ToastService',\r\n                    function ($scope, $stateParams, $state, TicketServ, ToastService) {\r\n                        $scope.image = {\r\n                            src: '',\r\n                            encoded: '',\r\n                            showCamera: true\r\n                        };\r\n\r\n                        if (typeof $stateParams.id == \"undefined\")\r\n                            $state.go('ticket.add.stepOne');\r\n\r\n                        $scope.next = function () {\r\n                            TicketServ.update({id: $stateParams.id}, {image_url: $scope.image.src}).$promise.then(function () {\r\n                                $state.go('ticket.review-ticket', {id: $stateParams.id});\r\n                            }, function () {\r\n                                ToastService.error(\"Could not save image\");\r\n                            });\r\n                        };\r\n                    }],\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n\r\n        $stateProvider.state('ticket.review-ticket',\r\n            {\r\n                url: '/review/{id}',\r\n                templateUrl: 'partials/ticket/evaluation/review.html',\r\n                controller: ['$scope', '$stateParams', 'Ticket', 'TicketServ', '$state', 'MailServ',\r\n                    function ($scope, $stateParams, Ticket, TicketServ, $state, MailServ) {\r\n\r\n                        if (typeof $stateParams.id == \"undefined\")\r\n                            $state.go('ticket.add.stepOne');\r\n\r\n                        $scope.ticket = Ticket;\r\n\r\n                        $scope.next = function () {\r\n                            Ticket.discount_voucher_code = $scope.ticket.discount_voucher_code;\r\n                            TicketServ.update({id: Ticket.id}, Ticket);\r\n\r\n                            MailServ.save({'ticket_id': Ticket.id}, function (mail) {\r\n                                console.log(mail);\r\n                            });\r\n\r\n                            $state.go('ticket.all-done');\r\n                        }\r\n                    }],\r\n                resolve: {\r\n                    'Ticket': ['TicketServ', '$state', '$stateParams',\r\n                        function (TicketServ, $state, $stateParams) {\r\n                            return TicketServ.get({id: $stateParams.id});\r\n                        }],\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.all-done',\r\n            {\r\n                url: '/done',\r\n                templateUrl: 'partials/ticket/done.html',\r\n                controller: function () {\r\n                },\r\n                resolve: {\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('ticket.search',\r\n            {\r\n                url: '/search?q',\r\n                templateUrl: 'partials/ticket/search.html',\r\n                controller: ['$scope', 'result', '$stateParams', function ($scope, result, $stateParams) {\r\n                    console.log(result);\r\n                    $scope.result = result;\r\n                    $scope.search = $stateParams.q;\r\n                }],\r\n                resolve: {\r\n                    'result': ['$stateParams', 'TicketServ', function ($stateParams, TicketServ) {\r\n                        return TicketServ.query({q: $stateParams.q});\r\n                    }],\r\n                    'hasHistory': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.hasHistory = true;\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n        $stateProvider.state('config',\r\n            {\r\n                url: '/config',\r\n                templateUrl: 'partials/config/form.html',\r\n                controller: function () {\r\n                },\r\n                resolve: {\r\n                    'active': ['$rootScope', function ($rootScope) {\r\n                        $rootScope.active_nav = 'config';\r\n                    }]\r\n                }\r\n            }\r\n        );\r\n\r\n\r\n        $urlRouterProvider.otherwise('/ticket/menu');\r\n    }]);\r\n\r\napp.factory('sessionInjector', ['$location', function ($location) {\r\n    return {\r\n        request: function (config) {\r\n            config.headers['X-Requested-With'] = 'XMLHttpRequest';\r\n            console.log('Header modified');\r\n            return config;\r\n        },\r\n        responseError: function (response) {\r\n            if (response.status == 401) {\r\n                location.href = '/auth/login';\r\n                return response;\r\n            }\r\n            return response;\r\n        },\r\n        response: function (response) {\r\n            if (response.status == 401) {\r\n                location.href = '/auth/login';\r\n                return response;\r\n            }\r\n            return response;\r\n        }\r\n    };\r\n}]);\r\n\r\napp.config(['$httpProvider', function ($httpProvider) {\r\n    $httpProvider.interceptors.push('sessionInjector');\r\n}]);\r\n\r\napp.run(['$http', '$rootScope', 'CSRF_TOKEN', '$timeout', 'PreloadTemplates',\r\n    function ($http, $rootScope, CSRF_TOKEN, $timeout, PreloadTemplates) {\r\n        PreloadTemplates.run();\r\n        $rootScope.CSRF_TOKEN = CSRF_TOKEN;\r\n        $http.defaults.headers.common['csrf_token'] = CSRF_TOKEN;\r\n        $rootScope.toast = {messages: [], show: false, type: 'info'};\r\n    }]);\r\n\r\n\r\n",
    "/**\r\n * Created by Ak on 2/19/2015.\r\n */\r\nvar module = angular.module('SuperAdminApp.controllers', ['SuperAdminApp.services']);\r\n\r\nmodule.controller('NewTicketController', [\r\n    '$scope', 'TicketServ', 'TicketColumns', '$state', '$stateParams', 'DeviceBrands', 'ToastService',\r\n    'GradeDeviceServ', '$cookieStore', 'Networks', 'GadgetEvaluationReward', 'Airtel', 'GradingSystem',\r\n    function ($scope, TicketServ, TicketColumns, $state, $stateParams, DeviceBrands, ToastService,\r\n              GradeDeviceServ, $cookieStore, Networks, GadgetEvaluationReward, Airtel, GradingSystem) {\r\n        $scope.device_brands = DeviceBrands;\r\n        $scope.TicketColumns = TicketColumns;\r\n        $scope.activeStep = 'stepOne';\r\n        $scope.isCreatingTicket = true;\r\n        $scope.creationError = false;\r\n        $scope.ticket = {\r\n            test: {\r\n                deviceBoot: '',\r\n                callUnlock: '',\r\n                wirelessConnection: '',\r\n                icloudConnection: ''\r\n            },\r\n            gradingSystem: GradingSystem\r\n        };\r\n        $scope.selected = {};\r\n        $scope.networks = Networks;\r\n        $scope.brand = {};\r\n        $scope.device = {};\r\n        $scope.activeNextButton = false;\r\n        $scope.airtel = Airtel;\r\n        $scope.portToAirtel = false;\r\n\r\n        $scope.$watch('ticket.test', function (newV, oldV) {\r\n            if (!stepThreeActive()) {\r\n                return;\r\n            }\r\n            console.log('test change');\r\n            console.log(newV);\r\n            var ready = checkTestsPassed(newV);\r\n            setViewState(ready);\r\n        }, true);\r\n\r\n\r\n        $scope.$watch('ticket.gradingSystem', function (newV, oldV) {\r\n            if (!stepFourActive()) {\r\n                return;\r\n            }\r\n            console.log('gradingSystem change');\r\n            console.log(newV);\r\n            $scope.ticket.device_grade = GradeDeviceServ.getGrade(newV);\r\n            console.log('Grade:' + $scope.ticket.device_grade);\r\n        }, true);\r\n\r\n        $scope.$watch('brand.selectedIndex', function (newV, oldV) {\r\n            if (!stepTwoActive()) {\r\n                return;\r\n            }\r\n            console.log('brand changed');\r\n            $scope.selected.brand = $scope.device_brands[newV];\r\n            $scope.devices = $scope.selected.brand.gadgets;\r\n            //brand.selected\r\n        });\r\n\r\n        $scope.$watch('device.selectedIndex', function (newV, oldV) {\r\n            if (!stepTwoActive()) {\r\n                return;\r\n            }\r\n            console.log('device changed');\r\n            $scope.selected.device = $scope.devices[newV];\r\n            $scope.ticket.gadget_id = $scope.selected.device.id;\r\n        });\r\n\r\n\r\n        $scope.createTicket = function (ticket) {\r\n            ticket.network_id = parseInt(ticket.network_id);\r\n            ticket.size_id = parseInt(ticket.size_id);\r\n\r\n            var ticketSaved = TicketServ.save(ticket);\r\n            ticketSaved.$promise.then(function (ticket) {\r\n                $scope.isCreatingTicket = false;\r\n                if (ticket.hasOwnProperty('id')) {\r\n                    $scope.ticket.savedTicket = ticket;\r\n                    console.log(ticket);\r\n                } else {\r\n                    console.log('error');\r\n                    $scope.creationError = true;\r\n                    ToastService.error(\"Could not create ticket, please try again later\");\r\n                }\r\n            }, function (ticket) {\r\n                alert(\"failed\");\r\n                console.log(ticket);\r\n                $scope.creationError = true;\r\n                ToastService.error(\"Could not create ticket, please try again later\");\r\n            });\r\n        };\r\n\r\n\r\n        $scope.nextStepOne = function () {\r\n            $scope.activeStep = 'stepOne';\r\n            $state.go('ticket.add.stepOne');\r\n        };\r\n\r\n        $scope.nextStepTwo = function () {\r\n            $scope.activeStep = 'stepTwo';\r\n            $state.go('ticket.add.stepTwo');\r\n        };\r\n\r\n        $scope.nextStepThree = function () {\r\n            $scope.activeStep = 'stepThree';\r\n            $state.go('ticket.add.stepThree');\r\n        };\r\n\r\n        $scope.nextStepFour = function () {\r\n            $scope.activeStep = 'stepFour';\r\n            $state.go('ticket.add.stepFour');\r\n        };\r\n\r\n        $scope.nextStepFinal = function () {\r\n            $scope.activeStep = 'stepFinal';\r\n            calculateDeviceReward();\r\n            $state.go('ticket.add.final');\r\n            $scope.createTicket($scope.ticket);\r\n        };\r\n\r\n        $scope.nextStepAcceptTerms = function () {\r\n            $scope.activeStep = 'stepAcceptTerms';\r\n            updateTicketsPortToAirtel();\r\n            $state.go('ticket.accept-terms', {id: $scope.ticket.savedTicket.id});\r\n        };\r\n\r\n        $scope.goHome = function () {\r\n            $state.go('ticket.menu');\r\n        };\r\n\r\n        function calculateDeviceGrade() {\r\n            return $scope.ticket.device_grade;\r\n        }\r\n\r\n        function calculateDeviceReward() {\r\n            $scope.selected.grade = calculateDeviceGrade();\r\n            $scope.selected.size = $scope.ticket.size_id;\r\n\r\n            angular.forEach($scope.selected.device.sizes, function (value, key) {\r\n                if (value.id == $scope.ticket.size_id) {\r\n                    this.size = value.value;\r\n                }\r\n            }, $scope.selected);\r\n\r\n            $scope.ticket.reward = GadgetEvaluationReward.calculate($scope.selected);\r\n        }\r\n\r\n        function stepTwoActive() {\r\n            return $scope.activeStep == 'stepTwo';\r\n        }\r\n\r\n        function stepThreeActive() {\r\n            return $scope.activeStep == 'stepThree';\r\n        }\r\n\r\n        function stepFourActive() {\r\n            return $scope.activeStep == 'stepFour';\r\n        }\r\n\r\n        function stepFinalActive() {\r\n            return $scope.activeStep == 'stepFinal';\r\n        }\r\n\r\n        function checkTestsPassed(obj) {\r\n            var state = {ready: true};\r\n\r\n            angular.forEach(obj, function (value, key) {\r\n                if (value == 'no') {\r\n                    this.ready = false;\r\n                }\r\n            }, state);\r\n\r\n            return state.ready;\r\n        }\r\n\r\n        function setViewState(ready) {\r\n            $scope.activeNextButton = ready;\r\n            if (ready) {\r\n                $scope.message = \"Ok, proceed.\";\r\n            } else {\r\n                $scope.message = \"Sorry, Device doesn't Qualify to Continue\";\r\n            }\r\n        }\r\n\r\n        function updateTicketsPortToAirtel() {\r\n            //$scope.ticket.savedTicket.port_to_airtel = $scope.portToAirtel;\r\n\r\n            TicketServ.update({id: $scope.ticket.savedTicket.id}, $scope.ticket.savedTicket);\r\n        }\r\n    }]);",
    "/**\r\n * Created by Ak on 2/19/2015.\r\n */\r\n\r\nvar app = angular.module('SuperAdminApp.directives', []);\r\n\r\napp.directive('backButton',function(){\r\n    return {\r\n        'restrict': 'EA',\r\n        'template': '<a class=\"btn base-resize search-btn back-btn\" href=\"\"><span class=\"fa fa-chevron-left\"></span></a>',\r\n        'link': function link(scope, element, attrs) {\r\n            element.bind('click',function(e){\r\n                window.history.back();\r\n                e.preventDefault();\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\napp.directive('webCamera',function(ScriptCam){\r\n    return {\r\n        'restrict': 'EA',\r\n        'scope': {\r\n            imageSrc: '=',\r\n            imageEncoded: '=',\r\n            showCamera: '='\r\n        },\r\n        'template':\r\n            '<div style=\"width: 320px;height: 300px;margin-right: auto;margin-left: auto\">' +\r\n            '<div>' +\r\n                '<div>' +\r\n                    '<div id=\"webcamFrame\"><div id=\"webcam\"></div></div>' +\r\n                    '<div style=\"margin-bottom: 10px;text-align: center;\">' +\r\n                        '<button class=\"btn btn-default btn-capture\">Capture</button>' +\r\n                        '<button class=\"btn btn-default goto-cam\"><span class=\"fa fa-chevron-left\"></span></button>' +\r\n                        '<button class=\"btn btn-default goto-img\"><span class=\"fa fa-chevron-right\"></span></button>' +\r\n                        '<button class=\"btn btn-primary save-img\"><span class=\"fa fa-save\"></span></button>' +\r\n                    '</div>' +\r\n                '</div>' +\r\n            '</div>' +\r\n            '<div class=\"preview\">' +\r\n            '<img ng-src=\"{{ imageSrc }}\" class=\"img-responsive preview-img\" alt=\"\"/>' +\r\n            '</div>' +\r\n            '<div>' +\r\n            '</div></div>'\r\n        ,\r\n        'link': function link(scope, element, attrs) {\r\n            var webcam = element.find('#webcam');\r\n            var webcamFrame = element.find('#webcamFrame');\r\n            var previewImg = element.find('img.preview-img');\r\n            var gotoCameraBtn = element.find('.btn.goto-cam');\r\n            var gotoImgBtn = element.find('.btn.goto-img');\r\n            var saveImgBtn = element.find('.btn.save-img');\r\n            var captureImgBtn =  element.find('.btn-capture');\r\n\r\n            webcam.scriptcam({\r\n                path: ScriptCam.path,\r\n                showMicrophoneErrors:false,\r\n                onError:onError,\r\n                cornerColor:'eee',\r\n                uploadImage:ScriptCam.path+'upload.gif',\r\n                onPictureAsBase:captureImage\r\n            });\r\n\r\n            captureImgBtn.on('click',function(){\r\n                captureImage();\r\n            });\r\n\r\n            gotoCameraBtn.click(function(){\r\n                scope.showCamera = true;\r\n                scope.$apply();\r\n            });\r\n\r\n            gotoImgBtn.click(function(){\r\n                scope.showCamera = false;\r\n                scope.$apply();\r\n            });\r\n\r\n            scope.$watch('showCamera',function(newV,oldV){\r\n               if(newV == true){\r\n                   webcamFrame.show();\r\n                   previewImg.hide();\r\n\r\n                   captureImgBtn.show();\r\n                   if(!angular.isDefined(scope.imageSrc) && scope.imageSrc != ''){\r\n                       gotoImgBtn.show();\r\n                   }\r\n                   gotoCameraBtn.hide();\r\n                   saveImgBtn.hide();\r\n\r\n               }else{\r\n                   webcamFrame.hide();\r\n                   captureImgBtn.hide();\r\n\r\n                   previewImg.show();\r\n                   gotoImgBtn.hide();\r\n                   gotoCameraBtn.show();\r\n                   saveImgBtn.show();\r\n               }\r\n            });\r\n\r\n            function captureImage(){\r\n                scope.imageSrc = base64_toimage();\r\n                scope.imageEncoded = base64_tofield();\r\n                scope.showCamera = false;\r\n                scope.$apply();\r\n            }\r\n\r\n            function base64_tofield() {\r\n                return $.scriptcam.getFrameAsBase64();\r\n            }\r\n\r\n            function base64_toimage() {\r\n                return \"data:image/png;base64,\"+$.scriptcam.getFrameAsBase64();\r\n            }\r\n\r\n            function onError(errorId,errorMsg) {\r\n                element.find('btn-capture').attr( \"disabled\", true );\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\napp.directive('fileButton',function(){\r\n    return {\r\n        'restrict': 'EA',\r\n        'scope': {\r\n            'name': '@name',\r\n            'label': '@'\r\n        },\r\n        'template': '<div class=\"input-group\"><div class=\"input-group-btn\"><span class=\"btn btn-info btn-file\">Browse.. <input type=\"file\" name=\"{{ name }}\"/> </span></div><input class=\"form-control file-select-label\" value=\"{{ label }}\" placeholder=\"Select a file\" name=\"file-name\" type=\"text\"/></div>',\r\n        'link': function link(scope, element, attrs) {\r\n            var fileInput = element.find('.btn-file input[type=file]');\r\n            //var fileLabel = element.find('input[type=text].file-select-label');\r\n            element.find('.btn.btn-file').css({\r\n                position: 'relative',\r\n                overflow: 'hidden',\r\n                width: '70px',\r\n                height: '34px'\r\n            });\r\n\r\n            fileInput.css({\r\n                top: '0',\r\n                right: '0',\r\n                position: 'absolute',\r\n                'min-width': 'inherit',\r\n                'width': 'inherit',\r\n                'min-height': 'inherit',\r\n                'height': 'inherit',\r\n                'font-size': '100px',\r\n                'text-align': 'right',\r\n                'filter': 'alpha(opacity=0)',\r\n                'opacity': '0',\r\n                'outline': 'none',\r\n                'backgound': 'white',\r\n                'cursor': 'inherit',\r\n                'display': 'block'\r\n            });\r\n\r\n            fileInput.on('change',function(){\r\n                console.log(\"file input change event\");\r\n                var input = $(this),numFiles = input.get(0).files ? input.get(0).files.length : 1;\r\n                scope.label = input.val().replace(/\\\\/g,'/').replace(/.*\\//,'');\r\n                console.log(scope.label);\r\n                scope.$apply();\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n\r\napp.directive('toast',function($animate,$timeout){\r\n    return {\r\n        'restrict': 'EA',\r\n        'template': '<div class=\"toast alert alert-{{ type }} text-center\" ><ul><li ng-repeat=\"message in messages\"> {{ message }}</li></ul></div>',\r\n        scope: {\r\n            type: '=type',\r\n            messages: '=messages',\r\n            show: '=show'\r\n        },\r\n        'link': function link(scope, element, attrs) {\r\n            function showToast() {\r\n                //$animate.addClass(element,'toast-alert');\r\n                element.css({opacity: 1});\r\n                $timeout(hideToast,10000);\r\n            }\r\n\r\n            function hideToast() {\r\n                element.css({opacity: 0});\r\n                //$animate.removeClass(element,'toast-alert');\r\n            }\r\n            showToast();\r\n            scope.$watch(function() { return scope.show; },function(newV,oldV){\r\n                if(newV == true){\r\n                    showToast();\r\n                }else{\r\n                    hideToast();\r\n                }\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\napp.directive('formItemUpdate',function($timeout){\r\n    return {\r\n        'restrict': 'A',\r\n        'scope': {\r\n            'status': '='\r\n        },\r\n        'link': function link(scope, element, attrs) {\r\n            function showLoadingTick() {\r\n                //element.remove('.loader-item');\r\n                element.find('.input-form-item')\r\n                    .html('<span class=\"loader-item\" style=\"margin-left: 20px\"><span class=\"fa fa-spin fa-spinner\"></span></span>');\r\n\r\n                $timeout(clear,3000);\r\n            }\r\n\r\n            function showErrorTick() {\r\n                //element.remove('.loader-item');\r\n                element.find('.input-form-item')\r\n                    .html('<span class=\"loader-item\" style=\"margin-left: 20px;color: red;\"><span class=\"fa fa-close\"></span></span>');\r\n\r\n                $timeout(clear,3000);\r\n            }\r\n\r\n            function showGreenTick() {\r\n               // element.remove('.loader-item');\r\n                element.find('.input-form-item')\r\n                    .html('<span class=\"loader-item\" style=\"margin-left: 20px;color: green;\"><span class=\"fa fa-check\"></span></span>')\r\n            }\r\n\r\n            function clear(){\r\n                element.find('.input-form-item')\r\n                    .html('');\r\n            }\r\n\r\n            scope.$watch('status',function(newV,oldV){\r\n                if(newV == 'success'){\r\n                    showGreenTick();\r\n                }else if(newV == 'failure'){\r\n                    showErrorTick();\r\n                }else if(newV == 'loading'){\r\n                    showLoadingTick();\r\n                }else{\r\n                    clear();\r\n                }\r\n            })\r\n        }\r\n    }\r\n});",
    "/**\r\n * Created by Ak on 2/19/2015.\r\n */\r\n",
    "/**\r\n * Created by Ak on 2/19/2015.\r\n */\r\n\r\nvar app = angular.module('SuperAdminApp.services', []);\r\n\r\napp.factory('TicketServ', ['$resource', 'URLServ', function ($resource, URLServ) {\r\n    return $resource('/resources/ticket/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'}\r\n    });//URLServ.getResourceUrlFor(\"ticket\"));\r\n}]);\r\n\r\n//TicketConfigServ\r\napp.factory('TicketConfigServ', ['$resource', 'URLServ', function ($resource, URLServ) {\r\n    return $resource('/resources/ticket-config/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'}\r\n    });//URLServ.getResourceUrlFor(\"ticket\"));\r\n}]);\r\n\r\napp.factory('DeviceBrandsServ', ['$resource', 'URLServ', function ($resource, URLServ) {\r\n    return $resource('/resources/device_makers/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'}\r\n    });//URLServ.getResourceUrlFor(\"ticket\"));\r\n}]);\r\n\r\napp.factory('AdvisersServ', ['$resource', 'URLServ', function ($resource, URLServ) {\r\n    return $resource('/resources/advisers/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'}\r\n    });//URLServ.getResourceUrlFor(\"ticket\"));\r\n}]);\r\n\r\napp.factory('DevicesServ', ['$resource', 'URLServ', function ($resource, URLServ) {\r\n    return $resource('/resources/devices/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'}\r\n    });//URLServ.getResourceUrlFor(\"ticket\"));\r\n}]);\r\n\r\napp.factory('GradingSystemServ', ['$resource', 'URLServ', function ($resource, URLServ) {\r\n    return $resource('/resources/grading-system-config/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'}\r\n    });//URLServ.getResourceUrlFor(\"ticket\"));\r\n}]);\r\n\r\n\r\napp.factory('MailServ', ['$resource', function ($resource) {\r\n    return $resource('/resources/mail', null);//URLServ.getResourceUrlFor(\"ticket\"));\r\n}]);\r\n\r\n\r\napp.factory('NetworksServ', ['$resource', 'URLServ', function ($resource, URLServ) {\r\n    return $resource('/resources/networks/:id', {id: '@id'}, {\r\n        'update': {method: 'PUT'}\r\n    });//URLServ.getResourceUrlFor(\"ticket\"));\r\n}]);\r\n\r\n\r\napp.factory('URLServ', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        \"getResourceUrlFor\": function (name) {\r\n            return $rootScope.data.resources[name];\r\n        }\r\n    }\r\n}]);\r\n\r\napp.factory('GadgetEvaluationReward', ['NetworksServ', '$cookieStore', function (NetworksServ, $cookieStore) {\r\n    var reward = {result: ''};\r\n\r\n    function getBaseLinePrice(device, size) {\r\n        var baseLinePrice = 0;\r\n\r\n        console.log('Device --reward');\r\n        console.log(device);\r\n        console.log(size);\r\n\r\n        if (device.base_line_prices.length == 1) {\r\n            baseLinePrice = parseInt(device.base_line_prices[0].value);\r\n        } else {\r\n\r\n            angular.forEach(device.base_line_prices, function (v, k) {\r\n                if (v.size == size) {\r\n                    baseLinePrice = parseInt(v.value);\r\n                }\r\n            });\r\n        }\r\n\r\n        return baseLinePrice;\r\n    }\r\n\r\n    function calculatePriceFromGrade(device, grade, baseLinePrice) {\r\n        console.log(baseLinePrice);\r\n        console.log(device.brand.normal_condition);\r\n        console.log(device.brand);\r\n        console.log(grade);\r\n\r\n        switch (grade) {\r\n            case 'A':\r\n                return parseFloat(parseInt(device.brand.normal_condition) / 100.0) * baseLinePrice;\r\n            case 'B':\r\n                return parseFloat(parseInt(device.brand.scratched_condition) / 100.0) * baseLinePrice;\r\n            case 'C':\r\n                return parseFloat(parseInt(device.brand.bad_condition) / 100.0) * baseLinePrice;\r\n        }\r\n    }\r\n\r\n    return {\r\n        \"calculate\": function (model) {\r\n            reward.result = calculatePriceFromGrade(model, model.grade, getBaseLinePrice(model.device, model.size));\r\n            console.log(reward.result);\r\n            $cookieStore.put('last-reward', reward.result);\r\n            return reward.result;\r\n        },\r\n        \"getLastReward\": function () {\r\n            return $cookieStore.get('last-reward');\r\n        },\r\n        fetchAirtelBonus: function () {\r\n            var network = NetworksServ.get({q: 'airtel'});\r\n            return network;\r\n        }\r\n    }\r\n}]);\r\n\r\napp.factory('GradeDeviceServ', ['$rootScope', function ($rootScope) {\r\n\r\n    var threshold = {\r\n        'A': 8.1,\r\n        'B': 5.85\r\n    };\r\n\r\n    function generateGradePoint(device) {\r\n        var result = {gradePoint: 0};\r\n\r\n        angular.forEach(device, function (value, key) {\r\n            if (angular.isDefined(value.rating) && value.rating != '') {\r\n                console.log(value.rating + \" -- \" + value.weight);\r\n                this.gradePoint += parseInt(value.rating) * value.weight;\r\n                console.log(this.gradePoint);\r\n            }\r\n        }, result);\r\n\r\n        return result.gradePoint;\r\n    }\r\n\r\n    function generateGradeLetter(gradePoint) {\r\n        var value = parseFloat(gradePoint);\r\n\r\n        if (value >= threshold.A) {\r\n            return 'A';\r\n        } else if (value >= threshold.B) {\r\n            return 'B';\r\n        } else {\r\n            return 'C';\r\n        }\r\n    }\r\n\r\n    return {\r\n        \"getGrade\": function (device) {\r\n            var gradePoint = generateGradePoint(device);\r\n            return generateGradeLetter(gradePoint);\r\n        }\r\n    }\r\n}]);\r\n\r\napp.factory('PreloadTemplates', ['$templateCache', '$http', 'PRELOAD_UI_LIST', function ($templateCache, $http, PRELOAD_UI_LIST) {\r\n    var templates = PRELOAD_UI_LIST.get();\r\n    return {\r\n        run: function () {\r\n            templates.forEach(function (currentItem) {\r\n                $http.get(currentItem, {cache: $templateCache});\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\n\r\napp.factory('ImageFetcher', ['$http', '$q', function ($http, $q) {\r\n    var searchUrl = \"https://www.googleapis.com/customsearch/v1?key=AIzaSyAJ_8QtWECvWTcrukqvfLmRWdARJ2bI2rk&cx=011505858740112002603:dap5yb7naau&q=\";\r\n\r\n    return {\r\n        fetch: function (query) {\r\n            var images = [];\r\n            var deferred = $q.defer();\r\n            $http.get(searchUrl + encodeURI(query)).then(function (response) {\r\n                console.log(response.data);\r\n                response.data.items.forEach(function (currentValue) {\r\n                    if (angular.isDefined(currentValue.pagemap)) {\r\n                        var temp = currentValue.pagemap.cse_image;//cse_thumbnail;\r\n                        if (angular.isDefined(temp) && angular.isArray(temp)) {\r\n                            temp.forEach(function (cValue) {\r\n                                images.push(cValue);\r\n//                                if (cValue.height > cValue.width) {\r\n//                                    images.push(cValue);\r\n//                                }\r\n                            });\r\n                        } else if (angular.isDefined(temp) && angular.isObject(temp)) {\r\n                            images.push(temp);\r\n                        }\r\n                    }\r\n                });\r\n                console.log(images);\r\n                deferred.resolve(images);\r\n            }, function (response) {\r\n                console.log(response);\r\n                deferred.reject(response);\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }\r\n\r\n}]);\r\n\r\n\r\napp.factory('ToastService', ['$rootScope', function ($rootScope) {\r\n\r\n    if (angular.isUndefined($rootScope.toast)) {\r\n        $rootScope.toast = {messages: [], show: false, type: 'info'};\r\n    }\r\n\r\n    return {\r\n        error: function (message) {\r\n            $rootScope.toast = {messages: [message], show: true, type: 'danger'};\r\n        },\r\n        info: function (message) {\r\n            $rootScope.toast = {messages: [message], show: true, type: 'info'};\r\n        },\r\n        success: function (message) {\r\n            $rootScope.toast = {messages: [message], show: true, type: 'success'};\r\n        }\r\n    }\r\n}]);"
  ],
  "sourceRoot": "/source/"
}